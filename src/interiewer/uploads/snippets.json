[
          {
                    "title": "two-sum",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int[] TwoSum(int[] nums, int target) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function twoSum(nums: number[], target: number): number[] {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer[]\n     */\n    function twoSum($nums, $target) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func twoSum(_ nums: [Int], _ target: Int) -> [Int] {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun twoSum(nums: IntArray, target: Int): IntArray {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  List<int> twoSum(List<int> nums, int target) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func twoSum(nums []int, target int) []int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[]}\ndef two_sum(nums, target)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def twoSum(nums: Array[Int], target: Int): Array[Int] = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (two-sum nums target)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec two_sum(Nums :: [integer()], Target :: integer()) -> [integer()].\ntwo_sum(Nums, Target) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec two_sum(nums :: [integer], target :: integer) :: [integer]\n  def two_sum(nums, target) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "add-two-numbers",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function(l1, l2) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction addTwoNumbers(l1: ListNode | null, l2: ListNode | null): ListNode | null {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $l1\n     * @param ListNode $l2\n     * @return ListNode\n     */\n    function addTwoNumbers($l1, $l2) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun addTwoNumbers(l1: ListNode?, l2: ListNode?): ListNode? {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? addTwoNumbers(ListNode? l1, ListNode? l2) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} l1\n# @param {ListNode} l2\n# @return {ListNode}\ndef add_two_numbers(l1, l2)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def addTwoNumbers(l1: ListNode, l2: ListNode): ListNode = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn add_two_numbers(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (add-two-numbers l1 l2)\n  (-> (or/c list-node? #f) (or/c list-node? #f) (or/c list-node? #f))\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec add_two_numbers(L1 :: #list_node{} | null, L2 :: #list_node{} | null) -> #list_node{} | null.\nadd_two_numbers(L1, L2) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec add_two_numbers(l1 :: ListNode.t | nil, l2 :: ListNode.t | nil) :: ListNode.t | nil\n  def add_two_numbers(l1, l2) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "longest-substring-without-repeating-characters",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int lengthOfLongestSubstring(char* s) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int LengthOfLongestSubstring(string s) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function lengthOfLongestSubstring(s: string): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function lengthOfLongestSubstring($s) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func lengthOfLongestSubstring(_ s: String) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun lengthOfLongestSubstring(s: String): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int lengthOfLongestSubstring(String s) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func lengthOfLongestSubstring(s string) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {String} s\n# @return {Integer}\ndef length_of_longest_substring(s)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def lengthOfLongestSubstring(s: String): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn length_of_longest_substring(s: String) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (length-of-longest-substring s)\n  (-> string? exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec length_of_longest_substring(S :: unicode:unicode_binary()) -> integer().\nlength_of_longest_substring(S) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec length_of_longest_substring(s :: String.t) :: integer\n  def length_of_longest_substring(s) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "median-of-two-sorted-arrays",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public double FindMedianSortedArrays(int[] nums1, int[] nums2) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findMedianSortedArrays = function(nums1, nums2) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function findMedianSortedArrays(nums1: number[], nums2: number[]): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Float\n     */\n    function findMedianSortedArrays($nums1, $nums2) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func findMedianSortedArrays(_ nums1: [Int], _ nums2: [Int]) -> Double {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun findMedianSortedArrays(nums1: IntArray, nums2: IntArray): Double {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  double findMedianSortedArrays(List<int> nums1, List<int> nums2) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Float}\ndef find_median_sorted_arrays(nums1, nums2)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def findMedianSortedArrays(nums1: Array[Int], nums2: Array[Int]): Double = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn find_median_sorted_arrays(nums1: Vec<i32>, nums2: Vec<i32>) -> f64 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (find-median-sorted-arrays nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) flonum?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec find_median_sorted_arrays(Nums1 :: [integer()], Nums2 :: [integer()]) -> float().\nfind_median_sorted_arrays(Nums1, Nums2) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec find_median_sorted_arrays(nums1 :: [integer], nums2 :: [integer]) :: float\n  def find_median_sorted_arrays(nums1, nums2) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "longest-palindromic-substring",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    string longestPalindrome(string s) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public String longestPalindrome(String s) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "char* longestPalindrome(char* s) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public string LongestPalindrome(string s) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function(s) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function longestPalindrome(s: string): string {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function longestPalindrome($s) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func longestPalindrome(_ s: String) -> String {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun longestPalindrome(s: String): String {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  String longestPalindrome(String s) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func longestPalindrome(s string) string {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {String} s\n# @return {String}\ndef longest_palindrome(s)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def longestPalindrome(s: String): String = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn longest_palindrome(s: String) -> String {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (longest-palindrome s)\n  (-> string? string?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec longest_palindrome(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nlongest_palindrome(S) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec longest_palindrome(s :: String.t) :: String.t\n  def longest_palindrome(s) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "reverse-integer",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int reverse(int x) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int reverse(int x) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def reverse(self, x: int) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int reverse(int x){\n\n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int Reverse(int x) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number} x\n * @return {number}\n */\nvar reverse = function(x) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function reverse(x: number): number {\n\n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Integer\n     */\n    function reverse($x) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func reverse(_ x: Int) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun reverse(x: Int): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int reverse(int x) {\n\n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func reverse(x int) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer} x\n# @return {Integer}\ndef reverse(x)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def reverse(x: Int): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn reverse(x: i32) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (reverse x)\n  (-> exact-integer? exact-integer?)\n\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec reverse(X :: integer()) -> integer().\nreverse(X) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec reverse(x :: integer) :: integer\n  def reverse(x) do\n\n  end\nend"
                              }
                    ]
          },
          {
                    "title": "string-to-integer-atoi",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int myAtoi(string s) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int myAtoi(String s) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def myAtoi(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def myAtoi(self, s: str) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int myAtoi(char* s) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int MyAtoi(string s) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar myAtoi = function(s) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function myAtoi(s: string): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function myAtoi($s) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func myAtoi(_ s: String) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun myAtoi(s: String): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int myAtoi(String s) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func myAtoi(s string) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {String} s\n# @return {Integer}\ndef my_atoi(s)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def myAtoi(s: String): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn my_atoi(s: String) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (my-atoi s)\n  (-> string? exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec my_atoi(S :: unicode:unicode_binary()) -> integer().\nmy_atoi(S) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec my_atoi(s :: String.t) :: integer\n  def my_atoi(s) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "regular-expression-matching",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    bool isMatch(string s, string p) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public boolean isMatch(String s, String p) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "bool isMatch(char* s, char* p) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public bool IsMatch(string s, string p) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {string} s\n * @param {string} p\n * @return {boolean}\n */\nvar isMatch = function(s, p) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function isMatch(s: string, p: string): boolean {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $p\n     * @return Boolean\n     */\n    function isMatch($s, $p) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func isMatch(_ s: String, _ p: String) -> Bool {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun isMatch(s: String, p: String): Boolean {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  bool isMatch(String s, String p) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func isMatch(s string, p string) bool {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {String} s\n# @param {String} p\n# @return {Boolean}\ndef is_match(s, p)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def isMatch(s: String, p: String): Boolean = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn is_match(s: String, p: String) -> bool {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (is-match s p)\n  (-> string? string? boolean?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec is_match(S :: unicode:unicode_binary(), P :: unicode:unicode_binary()) -> boolean().\nis_match(S, P) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec is_match(s :: String.t, p :: String.t) :: boolean\n  def is_match(s, p) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "container-with-most-water",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int maxArea(vector<int>& height) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int maxArea(int[] height) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def maxArea(self, height: List[int]) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int maxArea(int* height, int heightSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int MaxArea(int[] height) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} height\n * @return {number}\n */\nvar maxArea = function(height) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function maxArea(height: number[]): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $height\n     * @return Integer\n     */\n    function maxArea($height) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func maxArea(_ height: [Int]) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun maxArea(height: IntArray): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int maxArea(List<int> height) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func maxArea(height []int) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} height\n# @return {Integer}\ndef max_area(height)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def maxArea(height: Array[Int]): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn max_area(height: Vec<i32>) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (max-area height)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec max_area(Height :: [integer()]) -> integer().\nmax_area(Height) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec max_area(height :: [integer]) :: integer\n  def max_area(height) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "roman-to-integer",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int romanToInt(string s) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int romanToInt(String s) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def romanToInt(self, s: str) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int romanToInt(char* s) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int RomanToInt(string s) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar romanToInt = function(s) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function romanToInt(s: string): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function romanToInt($s) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func romanToInt(_ s: String) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun romanToInt(s: String): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int romanToInt(String s) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func romanToInt(s string) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {String} s\n# @return {Integer}\ndef roman_to_int(s)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def romanToInt(s: String): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn roman_to_int(s: String) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (roman-to-int s)\n  (-> string? exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec roman_to_int(S :: unicode:unicode_binary()) -> integer().\nroman_to_int(S) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec roman_to_int(s :: String.t) :: integer\n  def roman_to_int(s) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "longest-common-prefix",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    string longestCommonPrefix(vector<string>& strs) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public String longestCommonPrefix(String[] strs) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "char* longestCommonPrefix(char** strs, int strsSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public string LongestCommonPrefix(string[] strs) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function longestCommonPrefix(strs: string[]): string {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param String[] $strs\n     * @return String\n     */\n    function longestCommonPrefix($strs) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func longestCommonPrefix(_ strs: [String]) -> String {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun longestCommonPrefix(strs: Array<String>): String {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  String longestCommonPrefix(List<String> strs) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func longestCommonPrefix(strs []string) string {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {String[]} strs\n# @return {String}\ndef longest_common_prefix(strs)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def longestCommonPrefix(strs: Array[String]): String = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn longest_common_prefix(strs: Vec<String>) -> String {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (longest-common-prefix strs)\n  (-> (listof string?) string?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec longest_common_prefix(Strs :: [unicode:unicode_binary()]) -> unicode:unicode_binary().\nlongest_common_prefix(Strs) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec longest_common_prefix(strs :: [String.t]) :: String.t\n  def longest_common_prefix(strs) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "3sum",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public IList<IList<int>> ThreeSum(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar threeSum = function(nums) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function threeSum(nums: number[]): number[][] {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function threeSum($nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func threeSum(_ nums: [Int]) -> [[Int]] {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun threeSum(nums: IntArray): List<List<Int>> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  List<List<int>> threeSum(List<int> nums) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func threeSum(nums []int) [][]int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} nums\n# @return {Integer[][]}\ndef three_sum(nums)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def threeSum(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn three_sum(nums: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (three-sum nums)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)))\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec three_sum(Nums :: [integer()]) -> [[integer()]].\nthree_sum(Nums) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec three_sum(nums :: [integer]) :: [[integer]]\n  def three_sum(nums) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "letter-combinations-of-a-phone-number",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    vector<string> letterCombinations(string digits) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public List<String> letterCombinations(String digits) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** letterCombinations(char* digits, int* returnSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public IList<string> LetterCombinations(string digits) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {string} digits\n * @return {string[]}\n */\nvar letterCombinations = function(digits) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function letterCombinations(digits: string): string[] {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param String $digits\n     * @return String[]\n     */\n    function letterCombinations($digits) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func letterCombinations(_ digits: String) -> [String] {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun letterCombinations(digits: String): List<String> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  List<String> letterCombinations(String digits) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func letterCombinations(digits string) []string {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {String} digits\n# @return {String[]}\ndef letter_combinations(digits)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def letterCombinations(digits: String): List[String] = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn letter_combinations(digits: String) -> Vec<String> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (letter-combinations digits)\n  (-> string? (listof string?))\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec letter_combinations(Digits :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\nletter_combinations(Digits) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec letter_combinations(digits :: String.t) :: [String.t]\n  def letter_combinations(digits) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "remove-nth-node-from-end-of-list",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* removeNthFromEnd(struct ListNode* head, int n) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode RemoveNthFromEnd(ListNode head, int n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} n\n * @return {ListNode}\n */\nvar removeNthFromEnd = function(head, n) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction removeNthFromEnd(head: ListNode | null, n: number): ListNode | null {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @param Integer $n\n     * @return ListNode\n     */\n    function removeNthFromEnd($head, $n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func removeNthFromEnd(_ head: ListNode?, _ n: Int) -> ListNode? {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun removeNthFromEnd(head: ListNode?, n: Int): ListNode? {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? removeNthFromEnd(ListNode? head, int n) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc removeNthFromEnd(head *ListNode, n int) *ListNode {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @param {Integer} n\n# @return {ListNode}\ndef remove_nth_from_end(head, n)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def removeNthFromEnd(head: ListNode, n: Int): ListNode = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn remove_nth_from_end(head: Option<Box<ListNode>>, n: i32) -> Option<Box<ListNode>> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (remove-nth-from-end head n)\n  (-> (or/c list-node? #f) exact-integer? (or/c list-node? #f))\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec remove_nth_from_end(Head :: #list_node{} | null, N :: integer()) -> #list_node{} | null.\nremove_nth_from_end(Head, N) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec remove_nth_from_end(head :: ListNode.t | nil, n :: integer) :: ListNode.t | nil\n  def remove_nth_from_end(head, n) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "valid-parentheses",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    bool isValid(string s) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public boolean isValid(String s) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def isValid(self, s: str) -> bool:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "bool isValid(char* s) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public bool IsValid(string s) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function isValid(s: string): boolean {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function isValid($s) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func isValid(_ s: String) -> Bool {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun isValid(s: String): Boolean {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  bool isValid(String s) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func isValid(s string) bool {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {String} s\n# @return {Boolean}\ndef is_valid(s)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def isValid(s: String): Boolean = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn is_valid(s: String) -> bool {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (is-valid s)\n  (-> string? boolean?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec is_valid(S :: unicode:unicode_binary()) -> boolean().\nis_valid(S) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec is_valid(s :: String.t) :: boolean\n  def is_valid(s) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "merge-two-sorted-lists",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} list1\n * @param {ListNode} list2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(list1, list2) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction mergeTwoLists(list1: ListNode | null, list2: ListNode | null): ListNode | null {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $list1\n     * @param ListNode $list2\n     * @return ListNode\n     */\n    function mergeTwoLists($list1, $list2) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func mergeTwoLists(_ list1: ListNode?, _ list2: ListNode?) -> ListNode? {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun mergeTwoLists(list1: ListNode?, list2: ListNode?): ListNode? {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? mergeTwoLists(ListNode? list1, ListNode? list2) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} list1\n# @param {ListNode} list2\n# @return {ListNode}\ndef merge_two_lists(list1, list2)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def mergeTwoLists(list1: ListNode, list2: ListNode): ListNode = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn merge_two_lists(list1: Option<Box<ListNode>>, list2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (merge-two-lists list1 list2)\n  (-> (or/c list-node? #f) (or/c list-node? #f) (or/c list-node? #f))\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec merge_two_lists(List1 :: #list_node{} | null, List2 :: #list_node{} | null) -> #list_node{} | null.\nmerge_two_lists(List1, List2) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec merge_two_lists(list1 :: ListNode.t | nil, list2 :: ListNode.t | nil) :: ListNode.t | nil\n  def merge_two_lists(list1, list2) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "generate-parentheses",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    vector<string> generateParenthesis(int n) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public List<String> generateParenthesis(int n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** generateParenthesis(int n, int* returnSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public IList<string> GenerateParenthesis(int n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function(n) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function generateParenthesis(n: number): string[] {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String[]\n     */\n    function generateParenthesis($n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func generateParenthesis(_ n: Int) -> [String] {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun generateParenthesis(n: Int): List<String> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  List<String> generateParenthesis(int n) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func generateParenthesis(n int) []string {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer} n\n# @return {String[]}\ndef generate_parenthesis(n)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def generateParenthesis(n: Int): List[String] = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn generate_parenthesis(n: i32) -> Vec<String> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (generate-parenthesis n)\n  (-> exact-integer? (listof string?))\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec generate_parenthesis(N :: integer()) -> [unicode:unicode_binary()].\ngenerate_parenthesis(N) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec generate_parenthesis(n :: integer) :: [String.t]\n  def generate_parenthesis(n) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "merge-k-sorted-lists",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* mergeKLists(struct ListNode** lists, int listsSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode MergeKLists(ListNode[] lists) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode[]} lists\n * @return {ListNode}\n */\nvar mergeKLists = function(lists) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction mergeKLists(lists: Array<ListNode | null>): ListNode | null {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode[] $lists\n     * @return ListNode\n     */\n    function mergeKLists($lists) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func mergeKLists(_ lists: [ListNode?]) -> ListNode? {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun mergeKLists(lists: Array<ListNode?>): ListNode? {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? mergeKLists(List<ListNode?> lists) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc mergeKLists(lists []*ListNode) *ListNode {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode[]} lists\n# @return {ListNode}\ndef merge_k_lists(lists)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def mergeKLists(lists: Array[ListNode]): ListNode = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn merge_k_lists(lists: Vec<Option<Box<ListNode>>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (merge-k-lists lists)\n  (-> (listof (or/c list-node? #f)) (or/c list-node? #f))\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec merge_k_lists(Lists :: [#list_node{} | null]) -> #list_node{} | null.\nmerge_k_lists(Lists) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec merge_k_lists(lists :: [ListNode.t | nil]) :: ListNode.t | nil\n  def merge_k_lists(lists) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "remove-duplicates-from-sorted-array",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int removeDuplicates(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int removeDuplicates(int* nums, int numsSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int RemoveDuplicates(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar removeDuplicates = function(nums) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function removeDuplicates(nums: number[]): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function removeDuplicates(&$nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func removeDuplicates(_ nums: inout [Int]) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun removeDuplicates(nums: IntArray): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int removeDuplicates(List<int> nums) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func removeDuplicates(nums []int) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef remove_duplicates(nums)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def removeDuplicates(nums: Array[Int]): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn remove_duplicates(nums: &mut Vec<i32>) -> i32 {\n        \n    }\n}"
                              }
                    ]
          },
          {
                    "title": "find-the-index-of-the-first-occurrence-in-a-string",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int strStr(string haystack, string needle) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int strStr(String haystack, String needle) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int strStr(char* haystack, char* needle) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int StrStr(string haystack, string needle) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {string} haystack\n * @param {string} needle\n * @return {number}\n */\nvar strStr = function(haystack, needle) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function strStr(haystack: string, needle: string): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param String $haystack\n     * @param String $needle\n     * @return Integer\n     */\n    function strStr($haystack, $needle) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func strStr(_ haystack: String, _ needle: String) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun strStr(haystack: String, needle: String): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int strStr(String haystack, String needle) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func strStr(haystack string, needle string) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {String} haystack\n# @param {String} needle\n# @return {Integer}\ndef str_str(haystack, needle)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def strStr(haystack: String, needle: String): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn str_str(haystack: String, needle: String) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (str-str haystack needle)\n  (-> string? string? exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec str_str(Haystack :: unicode:unicode_binary(), Needle :: unicode:unicode_binary()) -> integer().\nstr_str(Haystack, Needle) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec str_str(haystack :: String.t, needle :: String.t) :: integer\n  def str_str(haystack, needle) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "divide-two-integers",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int divide(int dividend, int divisor) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int divide(int dividend, int divisor) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def divide(self, dividend: int, divisor: int) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int divide(int dividend, int divisor) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int Divide(int dividend, int divisor) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number} dividend\n * @param {number} divisor\n * @return {number}\n */\nvar divide = function(dividend, divisor) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function divide(dividend: number, divisor: number): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer $dividend\n     * @param Integer $divisor\n     * @return Integer\n     */\n    function divide($dividend, $divisor) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func divide(_ dividend: Int, _ divisor: Int) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun divide(dividend: Int, divisor: Int): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int divide(int dividend, int divisor) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func divide(dividend int, divisor int) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer} dividend\n# @param {Integer} divisor\n# @return {Integer}\ndef divide(dividend, divisor)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def divide(dividend: Int, divisor: Int): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn divide(dividend: i32, divisor: i32) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (divide dividend divisor)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec divide(Dividend :: integer(), Divisor :: integer()) -> integer().\ndivide(Dividend, Divisor) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec divide(dividend :: integer, divisor :: integer) :: integer\n  def divide(dividend, divisor) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "search-in-rotated-sorted-array",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int search(int[] nums, int target) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int search(int* nums, int numsSize, int target) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int Search(int[] nums, int target) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar search = function(nums, target) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function search(nums: number[], target: number): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function search($nums, $target) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func search(_ nums: [Int], _ target: Int) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun search(nums: IntArray, target: Int): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int search(List<int> nums, int target) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func search(nums []int, target int) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef search(nums, target)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def search(nums: Array[Int], target: Int): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn search(nums: Vec<i32>, target: i32) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (search nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec search(Nums :: [integer()], Target :: integer()) -> integer().\nsearch(Nums, Target) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec search(nums :: [integer], target :: integer) :: integer\n  def search(nums, target) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "find-first-and-last-position-of-element-in-sorted-array",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    vector<int> searchRange(vector<int>& nums, int target) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int[] searchRange(int[] nums, int target) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* searchRange(int* nums, int numsSize, int target, int* returnSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int[] SearchRange(int[] nums, int target) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar searchRange = function(nums, target) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function searchRange(nums: number[], target: number): number[] {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer[]\n     */\n    function searchRange($nums, $target) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func searchRange(_ nums: [Int], _ target: Int) -> [Int] {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun searchRange(nums: IntArray, target: Int): IntArray {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  List<int> searchRange(List<int> nums, int target) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func searchRange(nums []int, target int) []int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[]}\ndef search_range(nums, target)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def searchRange(nums: Array[Int], target: Int): Array[Int] = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn search_range(nums: Vec<i32>, target: i32) -> Vec<i32> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (search-range nums target)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec search_range(Nums :: [integer()], Target :: integer()) -> [integer()].\nsearch_range(Nums, Target) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec search_range(nums :: [integer], target :: integer) :: [integer]\n  def search_range(nums, target) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "valid-sudoku",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    bool isValidSudoku(vector<vector<char>>& board) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public boolean isValidSudoku(char[][] board) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "bool isValidSudoku(char** board, int boardSize, int* boardColSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public bool IsValidSudoku(char[][] board) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {character[][]} board\n * @return {boolean}\n */\nvar isValidSudoku = function(board) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function isValidSudoku(board: string[][]): boolean {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @return Boolean\n     */\n    function isValidSudoku($board) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func isValidSudoku(_ board: [[Character]]) -> Bool {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun isValidSudoku(board: Array<CharArray>): Boolean {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  bool isValidSudoku(List<List<String>> board) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func isValidSudoku(board [][]byte) bool {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Character[][]} board\n# @return {Boolean}\ndef is_valid_sudoku(board)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def isValidSudoku(board: Array[Array[Char]]): Boolean = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn is_valid_sudoku(board: Vec<Vec<char>>) -> bool {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (is-valid-sudoku board)\n  (-> (listof (listof char?)) boolean?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec is_valid_sudoku(Board :: [[char()]]) -> boolean().\nis_valid_sudoku(Board) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec is_valid_sudoku(board :: [[char]]) :: boolean\n  def is_valid_sudoku(board) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "count-and-say",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    string countAndSay(int n) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public String countAndSay(int n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def countAndSay(self, n: int) -> str:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "char* countAndSay(int n) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public string CountAndSay(int n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number} n\n * @return {string}\n */\nvar countAndSay = function(n) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function countAndSay(n: number): string {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String\n     */\n    function countAndSay($n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func countAndSay(_ n: Int) -> String {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun countAndSay(n: Int): String {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  String countAndSay(int n) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func countAndSay(n int) string {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer} n\n# @return {String}\ndef count_and_say(n)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def countAndSay(n: Int): String = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn count_and_say(n: i32) -> String {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (count-and-say n)\n  (-> exact-integer? string?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec count_and_say(N :: integer()) -> unicode:unicode_binary().\ncount_and_say(N) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec count_and_say(n :: integer) :: String.t\n  def count_and_say(n) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "first-missing-positive",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int firstMissingPositive(vector<int>& nums) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int firstMissingPositive(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int firstMissingPositive(int* nums, int numsSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int FirstMissingPositive(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar firstMissingPositive = function(nums) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function firstMissingPositive(nums: number[]): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function firstMissingPositive($nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func firstMissingPositive(_ nums: [Int]) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun firstMissingPositive(nums: IntArray): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int firstMissingPositive(List<int> nums) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func firstMissingPositive(nums []int) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef first_missing_positive(nums)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def firstMissingPositive(nums: Array[Int]): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn first_missing_positive(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (first-missing-positive nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec first_missing_positive(Nums :: [integer()]) -> integer().\nfirst_missing_positive(Nums) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec first_missing_positive(nums :: [integer]) :: integer\n  def first_missing_positive(nums) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "trapping-rain-water",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int trap(vector<int>& height) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int trap(int[] height) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def trap(self, height: List[int]) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int trap(int* height, int heightSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int Trap(int[] height) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} height\n * @return {number}\n */\nvar trap = function(height) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function trap(height: number[]): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $height\n     * @return Integer\n     */\n    function trap($height) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func trap(_ height: [Int]) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun trap(height: IntArray): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int trap(List<int> height) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func trap(height []int) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} height\n# @return {Integer}\ndef trap(height)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def trap(height: Array[Int]): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn trap(height: Vec<i32>) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (trap height)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec trap(Height :: [integer()]) -> integer().\ntrap(Height) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec trap(height :: [integer]) :: integer\n  def trap(height) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "wildcard-matching",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    bool isMatch(string s, string p) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public boolean isMatch(String s, String p) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "bool isMatch(char* s, char* p) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public bool IsMatch(string s, string p) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {string} s\n * @param {string} p\n * @return {boolean}\n */\nvar isMatch = function(s, p) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function isMatch(s: string, p: string): boolean {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $p\n     * @return Boolean\n     */\n    function isMatch($s, $p) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func isMatch(_ s: String, _ p: String) -> Bool {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun isMatch(s: String, p: String): Boolean {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  bool isMatch(String s, String p) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func isMatch(s string, p string) bool {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {String} s\n# @param {String} p\n# @return {Boolean}\ndef is_match(s, p)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def isMatch(s: String, p: String): Boolean = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn is_match(s: String, p: String) -> bool {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (is-match s p)\n  (-> string? string? boolean?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec is_match(S :: unicode:unicode_binary(), P :: unicode:unicode_binary()) -> boolean().\nis_match(S, P) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec is_match(s :: String.t, p :: String.t) :: boolean\n  def is_match(s, p) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "permutations",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    vector<vector<int>> permute(vector<int>& nums) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** permute(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public IList<IList<int>> Permute(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permute = function(nums) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function permute(nums: number[]): number[][] {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function permute($nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func permute(_ nums: [Int]) -> [[Int]] {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun permute(nums: IntArray): List<List<Int>> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  List<List<int>> permute(List<int> nums) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func permute(nums []int) [][]int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} nums\n# @return {Integer[][]}\ndef permute(nums)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def permute(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn permute(nums: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (permute nums)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)))\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec permute(Nums :: [integer()]) -> [[integer()]].\npermute(Nums) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec permute(nums :: [integer]) :: [[integer]]\n  def permute(nums) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "rotate-image",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    void rotate(vector<vector<int>>& matrix) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public void rotate(int[][] matrix) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def rotate(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "void rotate(int** matrix, int matrixSize, int* matrixColSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public void Rotate(int[][] matrix) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */\nvar rotate = function(matrix) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "/**\n Do not return anything, modify matrix in-place instead.\n */\nfunction rotate(matrix: number[][]): void {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return NULL\n     */\n    function rotate(&$matrix) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func rotate(_ matrix: inout [[Int]]) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun rotate(matrix: Array<IntArray>): Unit {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  void rotate(List<List<int>> matrix) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func rotate(matrix [][]int)  {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[][]} matrix\n# @return {Void} Do not return anything, modify matrix in-place instead.\ndef rotate(matrix)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def rotate(matrix: Array[Array[Int]]): Unit = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn rotate(matrix: &mut Vec<Vec<i32>>) {\n        \n    }\n}"
                              }
                    ]
          },
          {
                    "title": "group-anagrams",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def groupAnagrams(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar*** groupAnagrams(char** strs, int strsSize, int* returnSize, int** returnColumnSizes) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public IList<IList<string>> GroupAnagrams(string[] strs) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {string[]} strs\n * @return {string[][]}\n */\nvar groupAnagrams = function(strs) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function groupAnagrams(strs: string[]): string[][] {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param String[] $strs\n     * @return String[][]\n     */\n    function groupAnagrams($strs) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func groupAnagrams(_ strs: [String]) -> [[String]] {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun groupAnagrams(strs: Array<String>): List<List<String>> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  List<List<String>> groupAnagrams(List<String> strs) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func groupAnagrams(strs []string) [][]string {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {String[]} strs\n# @return {String[][]}\ndef group_anagrams(strs)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def groupAnagrams(strs: Array[String]): List[List[String]] = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn group_anagrams(strs: Vec<String>) -> Vec<Vec<String>> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (group-anagrams strs)\n  (-> (listof string?) (listof (listof string?)))\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec group_anagrams(Strs :: [unicode:unicode_binary()]) -> [[unicode:unicode_binary()]].\ngroup_anagrams(Strs) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec group_anagrams(strs :: [String.t]) :: [[String.t]]\n  def group_anagrams(strs) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "powx-n",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    double myPow(double x, int n) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public double myPow(double x, int n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def myPow(self, x, n):\n        \"\"\"\n        :type x: float\n        :type n: int\n        :rtype: float\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def myPow(self, x: float, n: int) -> float:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "double myPow(double x, int n) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public double MyPow(double x, int n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number} x\n * @param {number} n\n * @return {number}\n */\nvar myPow = function(x, n) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function myPow(x: number, n: number): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Float $x\n     * @param Integer $n\n     * @return Float\n     */\n    function myPow($x, $n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func myPow(_ x: Double, _ n: Int) -> Double {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun myPow(x: Double, n: Int): Double {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  double myPow(double x, int n) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func myPow(x float64, n int) float64 {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Float} x\n# @param {Integer} n\n# @return {Float}\ndef my_pow(x, n)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def myPow(x: Double, n: Int): Double = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn my_pow(x: f64, n: i32) -> f64 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (my-pow x n)\n  (-> flonum? exact-integer? flonum?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec my_pow(X :: float(), N :: integer()) -> float().\nmy_pow(X, N) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec my_pow(x :: float, n :: integer) :: float\n  def my_pow(x, n) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "maximum-subarray",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int maxSubArray(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int maxSubArray(int* nums, int numsSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int MaxSubArray(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxSubArray = function(nums) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function maxSubArray(nums: number[]): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxSubArray($nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func maxSubArray(_ nums: [Int]) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun maxSubArray(nums: IntArray): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int maxSubArray(List<int> nums) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func maxSubArray(nums []int) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_sub_array(nums)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def maxSubArray(nums: Array[Int]): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn max_sub_array(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (max-sub-array nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec max_sub_array(Nums :: [integer()]) -> integer().\nmax_sub_array(Nums) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec max_sub_array(nums :: [integer]) :: integer\n  def max_sub_array(nums) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "spiral-matrix",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    vector<int> spiralOrder(vector<vector<int>>& matrix) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public List<Integer> spiralOrder(int[][] matrix) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* spiralOrder(int** matrix, int matrixSize, int* matrixColSize, int* returnSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public IList<int> SpiralOrder(int[][] matrix) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[][]} matrix\n * @return {number[]}\n */\nvar spiralOrder = function(matrix) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function spiralOrder(matrix: number[][]): number[] {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return Integer[]\n     */\n    function spiralOrder($matrix) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func spiralOrder(_ matrix: [[Int]]) -> [Int] {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun spiralOrder(matrix: Array<IntArray>): List<Int> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  List<int> spiralOrder(List<List<int>> matrix) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func spiralOrder(matrix [][]int) []int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[][]} matrix\n# @return {Integer[]}\ndef spiral_order(matrix)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def spiralOrder(matrix: Array[Array[Int]]): List[Int] = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn spiral_order(matrix: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (spiral-order matrix)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?))\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec spiral_order(Matrix :: [[integer()]]) -> [integer()].\nspiral_order(Matrix) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec spiral_order(matrix :: [[integer]]) :: [integer]\n  def spiral_order(matrix) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "jump-game",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    bool canJump(vector<int>& nums) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public boolean canJump(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "bool canJump(int* nums, int numsSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public bool CanJump(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canJump = function(nums) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function canJump(nums: number[]): boolean {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function canJump($nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func canJump(_ nums: [Int]) -> Bool {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun canJump(nums: IntArray): Boolean {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  bool canJump(List<int> nums) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func canJump(nums []int) bool {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef can_jump(nums)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def canJump(nums: Array[Int]): Boolean = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn can_jump(nums: Vec<i32>) -> bool {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (can-jump nums)\n  (-> (listof exact-integer?) boolean?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec can_jump(Nums :: [integer()]) -> boolean().\ncan_jump(Nums) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec can_jump(nums :: [integer]) :: boolean\n  def can_jump(nums) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "merge-intervals",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    vector<vector<int>> merge(vector<vector<int>>& intervals) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int[][] merge(int[][] intervals) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def merge(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** merge(int** intervals, int intervalsSize, int* intervalsColSize, int* returnSize, int** returnColumnSizes) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int[][] Merge(int[][] intervals) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[][]} intervals\n * @return {number[][]}\n */\nvar merge = function(intervals) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function merge(intervals: number[][]): number[][] {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $intervals\n     * @return Integer[][]\n     */\n    function merge($intervals) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func merge(_ intervals: [[Int]]) -> [[Int]] {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun merge(intervals: Array<IntArray>): Array<IntArray> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  List<List<int>> merge(List<List<int>> intervals) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func merge(intervals [][]int) [][]int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[][]} intervals\n# @return {Integer[][]}\ndef merge(intervals)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def merge(intervals: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn merge(intervals: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (merge intervals)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec merge(Intervals :: [[integer()]]) -> [[integer()]].\nmerge(Intervals) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec merge(intervals :: [[integer]]) :: [[integer]]\n  def merge(intervals) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "unique-paths",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int uniquePaths(int m, int n) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int uniquePaths(int m, int n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int uniquePaths(int m, int n) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int UniquePaths(int m, int n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar uniquePaths = function(m, n) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function uniquePaths(m: number, n: number): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer $m\n     * @param Integer $n\n     * @return Integer\n     */\n    function uniquePaths($m, $n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func uniquePaths(_ m: Int, _ n: Int) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun uniquePaths(m: Int, n: Int): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int uniquePaths(int m, int n) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func uniquePaths(m int, n int) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer} m\n# @param {Integer} n\n# @return {Integer}\ndef unique_paths(m, n)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def uniquePaths(m: Int, n: Int): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn unique_paths(m: i32, n: i32) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (unique-paths m n)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec unique_paths(M :: integer(), N :: integer()) -> integer().\nunique_paths(M, N) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec unique_paths(m :: integer, n :: integer) :: integer\n  def unique_paths(m, n) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "plus-one",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int[] plusOne(int[] digits) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def plusOne(self, digits: List[int]) -> List[int]:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* plusOne(int* digits, int digitsSize, int* returnSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int[] PlusOne(int[] digits) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} digits\n * @return {number[]}\n */\nvar plusOne = function(digits) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function plusOne(digits: number[]): number[] {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $digits\n     * @return Integer[]\n     */\n    function plusOne($digits) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func plusOne(_ digits: [Int]) -> [Int] {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun plusOne(digits: IntArray): IntArray {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  List<int> plusOne(List<int> digits) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func plusOne(digits []int) []int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} digits\n# @return {Integer[]}\ndef plus_one(digits)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def plusOne(digits: Array[Int]): Array[Int] = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn plus_one(digits: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (plus-one digits)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec plus_one(Digits :: [integer()]) -> [integer()].\nplus_one(Digits) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec plus_one(digits :: [integer]) :: [integer]\n  def plus_one(digits) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "sqrtx",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int mySqrt(int x) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int mySqrt(int x) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def mySqrt(self, x: int) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int mySqrt(int x) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int MySqrt(int x) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number} x\n * @return {number}\n */\nvar mySqrt = function(x) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function mySqrt(x: number): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Integer\n     */\n    function mySqrt($x) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func mySqrt(_ x: Int) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun mySqrt(x: Int): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int mySqrt(int x) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func mySqrt(x int) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer} x\n# @return {Integer}\ndef my_sqrt(x)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def mySqrt(x: Int): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn my_sqrt(x: i32) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (my-sqrt x)\n  (-> exact-integer? exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec my_sqrt(X :: integer()) -> integer().\nmy_sqrt(X) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec my_sqrt(x :: integer) :: integer\n  def my_sqrt(x) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "climbing-stairs",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int climbStairs(int n) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int climbStairs(int n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def climbStairs(self, n: int) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int climbStairs(int n) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int ClimbStairs(int n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar climbStairs = function(n) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function climbStairs(n: number): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function climbStairs($n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func climbStairs(_ n: Int) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun climbStairs(n: Int): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int climbStairs(int n) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func climbStairs(n int) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer} n\n# @return {Integer}\ndef climb_stairs(n)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def climbStairs(n: Int): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn climb_stairs(n: i32) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (climb-stairs n)\n  (-> exact-integer? exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec climb_stairs(N :: integer()) -> integer().\nclimb_stairs(N) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec climb_stairs(n :: integer) :: integer\n  def climb_stairs(n) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "set-matrix-zeroes",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    void setZeroes(vector<vector<int>>& matrix) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public void setZeroes(int[][] matrix) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def setZeroes(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "void setZeroes(int** matrix, int matrixSize, int* matrixColSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public void SetZeroes(int[][] matrix) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */\nvar setZeroes = function(matrix) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "/**\n Do not return anything, modify matrix in-place instead.\n */\nfunction setZeroes(matrix: number[][]): void {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return NULL\n     */\n    function setZeroes(&$matrix) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func setZeroes(_ matrix: inout [[Int]]) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun setZeroes(matrix: Array<IntArray>): Unit {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  void setZeroes(List<List<int>> matrix) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func setZeroes(matrix [][]int)  {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[][]} matrix\n# @return {Void} Do not return anything, modify matrix in-place instead.\ndef set_zeroes(matrix)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def setZeroes(matrix: Array[Array[Int]]): Unit = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn set_zeroes(matrix: &mut Vec<Vec<i32>>) {\n        \n    }\n}"
                              }
                    ]
          },
          {
                    "title": "sort-colors",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    void sortColors(vector<int>& nums) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public void sortColors(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def sortColors(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "void sortColors(int* nums, int numsSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public void SortColors(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar sortColors = function(nums) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "/**\n Do not return anything, modify nums in-place instead.\n */\nfunction sortColors(nums: number[]): void {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return NULL\n     */\n    function sortColors(&$nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func sortColors(_ nums: inout [Int]) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun sortColors(nums: IntArray): Unit {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  void sortColors(List<int> nums) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func sortColors(nums []int)  {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} nums\n# @return {Void} Do not return anything, modify nums in-place instead.\ndef sort_colors(nums)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def sortColors(nums: Array[Int]): Unit = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn sort_colors(nums: &mut Vec<i32>) {\n        \n    }\n}"
                              }
                    ]
          },
          {
                    "title": "minimum-window-substring",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    string minWindow(string s, string t) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public String minWindow(String s, String t) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "char* minWindow(char* s, char* t) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public string MinWindow(string s, string t) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {string} s\n * @param {string} t\n * @return {string}\n */\nvar minWindow = function(s, t) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function minWindow(s: string, t: string): string {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return String\n     */\n    function minWindow($s, $t) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func minWindow(_ s: String, _ t: String) -> String {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun minWindow(s: String, t: String): String {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  String minWindow(String s, String t) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func minWindow(s string, t string) string {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {String} s\n# @param {String} t\n# @return {String}\ndef min_window(s, t)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def minWindow(s: String, t: String): String = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn min_window(s: String, t: String) -> String {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (min-window s t)\n  (-> string? string? string?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec min_window(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> unicode:unicode_binary().\nmin_window(S, T) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec min_window(s :: String.t, t :: String.t) :: String.t\n  def min_window(s, t) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "subsets",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    vector<vector<int>> subsets(vector<int>& nums) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public List<List<Integer>> subsets(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def subsets(self, nums: List[int]) -> List[List[int]]:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** subsets(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public IList<IList<int>> Subsets(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar subsets = function(nums) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function subsets(nums: number[]): number[][] {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function subsets($nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func subsets(_ nums: [Int]) -> [[Int]] {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun subsets(nums: IntArray): List<List<Int>> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  List<List<int>> subsets(List<int> nums) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func subsets(nums []int) [][]int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} nums\n# @return {Integer[][]}\ndef subsets(nums)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def subsets(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn subsets(nums: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (subsets nums)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)))\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec subsets(Nums :: [integer()]) -> [[integer()]].\nsubsets(Nums) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec subsets(nums :: [integer]) :: [[integer]]\n  def subsets(nums) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "word-search",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    bool exist(vector<vector<char>>& board, string word) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public boolean exist(char[][] board, String word) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "bool exist(char** board, int boardSize, int* boardColSize, char* word) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public bool Exist(char[][] board, string word) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {character[][]} board\n * @param {string} word\n * @return {boolean}\n */\nvar exist = function(board, word) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function exist(board: string[][], word: string): boolean {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @param String $word\n     * @return Boolean\n     */\n    function exist($board, $word) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func exist(_ board: [[Character]], _ word: String) -> Bool {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun exist(board: Array<CharArray>, word: String): Boolean {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  bool exist(List<List<String>> board, String word) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func exist(board [][]byte, word string) bool {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Character[][]} board\n# @param {String} word\n# @return {Boolean}\ndef exist(board, word)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def exist(board: Array[Array[Char]], word: String): Boolean = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn exist(board: Vec<Vec<char>>, word: String) -> bool {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (exist board word)\n  (-> (listof (listof char?)) string? boolean?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec exist(Board :: [[char()]], Word :: unicode:unicode_binary()) -> boolean().\nexist(Board, Word) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec exist(board :: [[char]], word :: String.t) :: boolean\n  def exist(board, word) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "largest-rectangle-in-histogram",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int largestRectangleArea(vector<int>& heights) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int largestRectangleArea(int[] heights) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int largestRectangleArea(int* heights, int heightsSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int LargestRectangleArea(int[] heights) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} heights\n * @return {number}\n */\nvar largestRectangleArea = function(heights) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function largestRectangleArea(heights: number[]): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $heights\n     * @return Integer\n     */\n    function largestRectangleArea($heights) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func largestRectangleArea(_ heights: [Int]) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun largestRectangleArea(heights: IntArray): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int largestRectangleArea(List<int> heights) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func largestRectangleArea(heights []int) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} heights\n# @return {Integer}\ndef largest_rectangle_area(heights)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def largestRectangleArea(heights: Array[Int]): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn largest_rectangle_area(heights: Vec<i32>) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (largest-rectangle-area heights)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec largest_rectangle_area(Heights :: [integer()]) -> integer().\nlargest_rectangle_area(Heights) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec largest_rectangle_area(heights :: [integer]) :: integer\n  def largest_rectangle_area(heights) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "merge-sorted-array",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "void merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public void Merge(int[] nums1, int m, int[] nums2, int n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} nums1\n * @param {number} m\n * @param {number[]} nums2\n * @param {number} n\n * @return {void} Do not return anything, modify nums1 in-place instead.\n */\nvar merge = function(nums1, m, nums2, n) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "/**\n Do not return anything, modify nums1 in-place instead.\n */\nfunction merge(nums1: number[], m: number, nums2: number[], n: number): void {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer $m\n     * @param Integer[] $nums2\n     * @param Integer $n\n     * @return NULL\n     */\n    function merge(&$nums1, $m, $nums2, $n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func merge(_ nums1: inout [Int], _ m: Int, _ nums2: [Int], _ n: Int) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun merge(nums1: IntArray, m: Int, nums2: IntArray, n: Int): Unit {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  void merge(List<int> nums1, int m, List<int> nums2, int n) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func merge(nums1 []int, m int, nums2 []int, n int)  {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} nums1\n# @param {Integer} m\n# @param {Integer[]} nums2\n# @param {Integer} n\n# @return {Void} Do not return anything, modify nums1 in-place instead.\ndef merge(nums1, m, nums2, n)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def merge(nums1: Array[Int], m: Int, nums2: Array[Int], n: Int): Unit = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn merge(nums1: &mut Vec<i32>, m: i32, nums2: &mut Vec<i32>, n: i32) {\n        \n    }\n}"
                              }
                    ]
          },
          {
                    "title": "decode-ways",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int numDecodings(string s) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int numDecodings(String s) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def numDecodings(self, s: str) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int numDecodings(char* s) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int NumDecodings(string s) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar numDecodings = function(s) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function numDecodings(s: string): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function numDecodings($s) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func numDecodings(_ s: String) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun numDecodings(s: String): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int numDecodings(String s) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func numDecodings(s string) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {String} s\n# @return {Integer}\ndef num_decodings(s)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def numDecodings(s: String): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn num_decodings(s: String) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (num-decodings s)\n  (-> string? exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec num_decodings(S :: unicode:unicode_binary()) -> integer().\nnum_decodings(S) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec num_decodings(s :: String.t) :: integer\n  def num_decodings(s) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "binary-tree-inorder-traversal",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* inorderTraversal(struct TreeNode* root, int* returnSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public IList<int> InorderTraversal(TreeNode root) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar inorderTraversal = function(root) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction inorderTraversal(root: TreeNode | null): number[] {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer[]\n     */\n    function inorderTraversal($root) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func inorderTraversal(_ root: TreeNode?) -> [Int] {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun inorderTraversal(root: TreeNode?): List<Int> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  List<int> inorderTraversal(TreeNode? root) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc inorderTraversal(root *TreeNode) []int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Integer[]}\ndef inorder_traversal(root)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def inorderTraversal(root: TreeNode): List[Int] = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn inorder_traversal(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (inorder-traversal root)\n  (-> (or/c tree-node? #f) (listof exact-integer?))\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec inorder_traversal(Root :: #tree_node{} | null) -> [integer()].\ninorder_traversal(Root) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec inorder_traversal(root :: TreeNode.t | nil) :: [integer]\n  def inorder_traversal(root) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "validate-binary-search-tree",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isValidBST(TreeNode root) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isValidBST(self, root: Optional[TreeNode]) -> bool:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nbool isValidBST(struct TreeNode* root) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public bool IsValidBST(TreeNode root) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isValidBST = function(root) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction isValidBST(root: TreeNode | null): boolean {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Boolean\n     */\n    function isValidBST($root) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func isValidBST(_ root: TreeNode?) -> Bool {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun isValidBST(root: TreeNode?): Boolean {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  bool isValidBST(TreeNode? root) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isValidBST(root *TreeNode) bool {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Boolean}\ndef is_valid_bst(root)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def isValidBST(root: TreeNode): Boolean = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn is_valid_bst(root: Option<Rc<RefCell<TreeNode>>>) -> bool {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (is-valid-bst root)\n  (-> (or/c tree-node? #f) boolean?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec is_valid_bst(Root :: #tree_node{} | null) -> boolean().\nis_valid_bst(Root) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec is_valid_bst(root :: TreeNode.t | nil) :: boolean\n  def is_valid_bst(root) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "symmetric-tree",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSymmetric(TreeNode* root) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isSymmetric(TreeNode root) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSymmetric(self, root: Optional[TreeNode]) -> bool:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nbool isSymmetric(struct TreeNode* root) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public bool IsSymmetric(TreeNode root) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isSymmetric = function(root) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction isSymmetric(root: TreeNode | null): boolean {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Boolean\n     */\n    function isSymmetric($root) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func isSymmetric(_ root: TreeNode?) -> Bool {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun isSymmetric(root: TreeNode?): Boolean {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  bool isSymmetric(TreeNode? root) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isSymmetric(root *TreeNode) bool {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Boolean}\ndef is_symmetric(root)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def isSymmetric(root: TreeNode): Boolean = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn is_symmetric(root: Option<Rc<RefCell<TreeNode>>>) -> bool {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (is-symmetric root)\n  (-> (or/c tree-node? #f) boolean?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec is_symmetric(Root :: #tree_node{} | null) -> boolean().\nis_symmetric(Root) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec is_symmetric(root :: TreeNode.t | nil) :: boolean\n  def is_symmetric(root) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "binary-tree-level-order-traversal",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** levelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public IList<IList<int>> LevelOrder(TreeNode root) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrder = function(root) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction levelOrder(root: TreeNode | null): number[][] {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer[][]\n     */\n    function levelOrder($root) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func levelOrder(_ root: TreeNode?) -> [[Int]] {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun levelOrder(root: TreeNode?): List<List<Int>> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  List<List<int>> levelOrder(TreeNode? root) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc levelOrder(root *TreeNode) [][]int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Integer[][]}\ndef level_order(root)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def levelOrder(root: TreeNode): List[List[Int]] = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn level_order(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<Vec<i32>> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (level-order root)\n  (-> (or/c tree-node? #f) (listof (listof exact-integer?)))\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec level_order(Root :: #tree_node{} | null) -> [[integer()]].\nlevel_order(Root) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec level_order(root :: TreeNode.t | nil) :: [[integer]]\n  def level_order(root) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "binary-tree-zigzag-level-order-traversal",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** zigzagLevelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public IList<IList<int>> ZigzagLevelOrder(TreeNode root) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar zigzagLevelOrder = function(root) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction zigzagLevelOrder(root: TreeNode | null): number[][] {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer[][]\n     */\n    function zigzagLevelOrder($root) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func zigzagLevelOrder(_ root: TreeNode?) -> [[Int]] {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun zigzagLevelOrder(root: TreeNode?): List<List<Int>> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  List<List<int>> zigzagLevelOrder(TreeNode? root) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc zigzagLevelOrder(root *TreeNode) [][]int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Integer[][]}\ndef zigzag_level_order(root)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def zigzagLevelOrder(root: TreeNode): List[List[Int]] = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn zigzag_level_order(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<Vec<i32>> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (zigzag-level-order root)\n  (-> (or/c tree-node? #f) (listof (listof exact-integer?)))\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec zigzag_level_order(Root :: #tree_node{} | null) -> [[integer()]].\nzigzag_level_order(Root) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec zigzag_level_order(root :: TreeNode.t | nil) :: [[integer]]\n  def zigzag_level_order(root) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "maximum-depth-of-binary-tree",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int maxDepth(TreeNode root) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nint maxDepth(struct TreeNode* root) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public int MaxDepth(TreeNode root) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar maxDepth = function(root) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction maxDepth(root: TreeNode | null): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer\n     */\n    function maxDepth($root) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func maxDepth(_ root: TreeNode?) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun maxDepth(root: TreeNode?): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  int maxDepth(TreeNode? root) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc maxDepth(root *TreeNode) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Integer}\ndef max_depth(root)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def maxDepth(root: TreeNode): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn max_depth(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (max-depth root)\n  (-> (or/c tree-node? #f) exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec max_depth(Root :: #tree_node{} | null) -> integer().\nmax_depth(Root) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec max_depth(root :: TreeNode.t | nil) :: integer\n  def max_depth(root) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "construct-binary-tree-from-preorder-and-inorder-traversal",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nstruct TreeNode* buildTree(int* preorder, int preorderSize, int* inorder, int inorderSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public TreeNode BuildTree(int[] preorder, int[] inorder) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {number[]} preorder\n * @param {number[]} inorder\n * @return {TreeNode}\n */\nvar buildTree = function(preorder, inorder) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction buildTree(preorder: number[], inorder: number[]): TreeNode | null {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param Integer[] $preorder\n     * @param Integer[] $inorder\n     * @return TreeNode\n     */\n    function buildTree($preorder, $inorder) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func buildTree(_ preorder: [Int], _ inorder: [Int]) -> TreeNode? {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun buildTree(preorder: IntArray, inorder: IntArray): TreeNode? {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  TreeNode? buildTree(List<int> preorder, List<int> inorder) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc buildTree(preorder []int, inorder []int) *TreeNode {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {Integer[]} preorder\n# @param {Integer[]} inorder\n# @return {TreeNode}\ndef build_tree(preorder, inorder)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def buildTree(preorder: Array[Int], inorder: Array[Int]): TreeNode = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn build_tree(preorder: Vec<i32>, inorder: Vec<i32>) -> Option<Rc<RefCell<TreeNode>>> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (build-tree preorder inorder)\n  (-> (listof exact-integer?) (listof exact-integer?) (or/c tree-node? #f))\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec build_tree(Preorder :: [integer()], Inorder :: [integer()]) -> #tree_node{} | null.\nbuild_tree(Preorder, Inorder) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec build_tree(preorder :: [integer], inorder :: [integer]) :: TreeNode.t | nil\n  def build_tree(preorder, inorder) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "convert-sorted-array-to-binary-search-tree",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode sortedArrayToBST(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nstruct TreeNode* sortedArrayToBST(int* nums, int numsSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public TreeNode SortedArrayToBST(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {number[]} nums\n * @return {TreeNode}\n */\nvar sortedArrayToBST = function(nums) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction sortedArrayToBST(nums: number[]): TreeNode | null {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return TreeNode\n     */\n    function sortedArrayToBST($nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func sortedArrayToBST(_ nums: [Int]) -> TreeNode? {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun sortedArrayToBST(nums: IntArray): TreeNode? {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  TreeNode? sortedArrayToBST(List<int> nums) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc sortedArrayToBST(nums []int) *TreeNode {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {Integer[]} nums\n# @return {TreeNode}\ndef sorted_array_to_bst(nums)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def sortedArrayToBST(nums: Array[Int]): TreeNode = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn sorted_array_to_bst(nums: Vec<i32>) -> Option<Rc<RefCell<TreeNode>>> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (sorted-array-to-bst nums)\n  (-> (listof exact-integer?) (or/c tree-node? #f))\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec sorted_array_to_bst(Nums :: [integer()]) -> #tree_node{} | null.\nsorted_array_to_bst(Nums) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec sorted_array_to_bst(nums :: [integer]) :: TreeNode.t | nil\n  def sorted_array_to_bst(nums) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "populating-next-right-pointers-in-each-node",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* left;\n    Node* right;\n    Node* next;\n\n    Node() : val(0), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val, Node* _left, Node* _right, Node* _next)\n        : val(_val), left(_left), right(_right), next(_next) {}\n};\n*/\n\nclass Solution {\npublic:\n    Node* connect(Node* root) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node next;\n\n    public Node() {}\n    \n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, Node _left, Node _right, Node _next) {\n        val = _val;\n        left = _left;\n        right = _right;\n        next = _next;\n    }\n};\n*/\n\nclass Solution {\n    public Node connect(Node root) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val=0, left=None, right=None, next=None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n\"\"\"\n\nclass Solution(object):\n    def connect(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: Node\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n\"\"\"\n\nclass Solution:\n    def connect(self, root: 'Optional[Node]') -> 'Optional[Node]':\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Definition for a Node.\n * struct Node {\n *     int val;\n *     struct Node *left;\n *     struct Node *right;\n *     struct Node *next;\n * };\n */\n\nstruct Node* connect(struct Node* root) {\n\t\n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node next;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, Node _left, Node _right, Node _next) {\n        val = _val;\n        left = _left;\n        right = _right;\n        next = _next;\n    }\n}\n*/\n\npublic class Solution {\n    public Node Connect(Node root) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * // Definition for a _Node.\n * function _Node(val, left, right, next) {\n *    this.val = val === undefined ? null : val;\n *    this.left = left === undefined ? null : left;\n *    this.right = right === undefined ? null : right;\n *    this.next = next === undefined ? null : next;\n * };\n */\n\n/**\n * @param {_Node} root\n * @return {_Node}\n */\nvar connect = function(root) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "/**\n * Definition for _Node.\n * class _Node {\n *     val: number\n *     left: _Node | null\n *     right: _Node | null\n *     next: _Node | null\n *     constructor(val?: number, left?: _Node, right?: _Node, next?: _Node) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction connect(root: _Node | null): _Node | null {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "/**\n * Definition for a Node.\n * class Node {\n *     function __construct($val = 0) {\n *         $this->val = $val;\n *         $this->left = null;\n *         $this->right = null;\n *         $this->next = null;\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param Node $root\n     * @return Node\n     */\n    public function connect($root) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "/**\n * Definition for a Node.\n * public class Node {\n *     public var val: Int\n *     public var left: Node?\n *     public var right: Node?\n *\t   public var next: Node?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *         self.next = nil\n *     }\n * }\n */\n\nclass Solution {\n    func connect(_ root: Node?) -> Node? {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "/**\n * Definition for a Node.\n * class Node(var `val`: Int) {\n *     var left: Node? = null\n *     var right: Node? = null\n *     var next: Node? = null\n * }\n */\n\nclass Solution {\n    fun connect(root: Node?): Node? {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Left *Node\n *     Right *Node\n *     Next *Node\n * }\n */\n\nfunc connect(root *Node) *Node {\n\t\n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# Definition for Node.\n# class Node\n#     attr_accessor :val, :left, :right, :next\n#     def initialize(val)\n#         @val = val\n#         @left, @right, @next = nil, nil, nil\n#     end\n# end\n\n# @param {Node} root\n# @return {Node}\ndef connect(root)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "/**\n * Definition for a Node.\n * class Node(var _value: Int) {\n *   var value: Int = _value\n *   var left: Node = null\n *   var right: Node = null\n *   var next: Node = null\n * }\n */\n\nobject Solution {\n    def connect(root: Node): Node = {\n        \n    }\n}"
                              }
                    ]
          },
          {
                    "title": "pascals-triangle",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    vector<vector<int>> generate(int numRows) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public List<List<Integer>> generate(int numRows) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** generate(int numRows, int* returnSize, int** returnColumnSizes) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public IList<IList<int>> Generate(int numRows) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number} numRows\n * @return {number[][]}\n */\nvar generate = function(numRows) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function generate(numRows: number): number[][] {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer $numRows\n     * @return Integer[][]\n     */\n    function generate($numRows) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func generate(_ numRows: Int) -> [[Int]] {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun generate(numRows: Int): List<List<Int>> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  List<List<int>> generate(int numRows) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func generate(numRows int) [][]int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer} num_rows\n# @return {Integer[][]}\ndef generate(num_rows)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def generate(numRows: Int): List[List[Int]] = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn generate(num_rows: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (generate numRows)\n  (-> exact-integer? (listof (listof exact-integer?)))\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec generate(NumRows :: integer()) -> [[integer()]].\ngenerate(NumRows) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec generate(num_rows :: integer) :: [[integer]]\n  def generate(num_rows) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "best-time-to-buy-and-sell-stock",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int maxProfit(int[] prices) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int maxProfit(int* prices, int pricesSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int MaxProfit(int[] prices) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function(prices) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function maxProfit(prices: number[]): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $prices\n     * @return Integer\n     */\n    function maxProfit($prices) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func maxProfit(_ prices: [Int]) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun maxProfit(prices: IntArray): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int maxProfit(List<int> prices) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func maxProfit(prices []int) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} prices\n# @return {Integer}\ndef max_profit(prices)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def maxProfit(prices: Array[Int]): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn max_profit(prices: Vec<i32>) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (max-profit prices)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec max_profit(Prices :: [integer()]) -> integer().\nmax_profit(Prices) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec max_profit(prices :: [integer]) :: integer\n  def max_profit(prices) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "best-time-to-buy-and-sell-stock-ii",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int maxProfit(int[] prices) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int maxProfit(int* prices, int pricesSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int MaxProfit(int[] prices) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function(prices) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function maxProfit(prices: number[]): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $prices\n     * @return Integer\n     */\n    function maxProfit($prices) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func maxProfit(_ prices: [Int]) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun maxProfit(prices: IntArray): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int maxProfit(List<int> prices) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func maxProfit(prices []int) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} prices\n# @return {Integer}\ndef max_profit(prices)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def maxProfit(prices: Array[Int]): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn max_profit(prices: Vec<i32>) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (max-profit prices)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec max_profit(Prices :: [integer()]) -> integer().\nmax_profit(Prices) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec max_profit(prices :: [integer]) :: integer\n  def max_profit(prices) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "binary-tree-maximum-path-sum",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int maxPathSum(TreeNode* root) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int maxPathSum(TreeNode root) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxPathSum(self, root: Optional[TreeNode]) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nint maxPathSum(struct TreeNode* root) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public int MaxPathSum(TreeNode root) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar maxPathSum = function(root) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction maxPathSum(root: TreeNode | null): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer\n     */\n    function maxPathSum($root) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func maxPathSum(_ root: TreeNode?) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun maxPathSum(root: TreeNode?): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  int maxPathSum(TreeNode? root) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc maxPathSum(root *TreeNode) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Integer}\ndef max_path_sum(root)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def maxPathSum(root: TreeNode): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn max_path_sum(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (max-path-sum root)\n  (-> (or/c tree-node? #f) exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec max_path_sum(Root :: #tree_node{} | null) -> integer().\nmax_path_sum(Root) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec max_path_sum(root :: TreeNode.t | nil) :: integer\n  def max_path_sum(root) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "valid-palindrome",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    bool isPalindrome(string s) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public boolean isPalindrome(String s) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def isPalindrome(self, s: str) -> bool:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "bool isPalindrome(char* s) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public bool IsPalindrome(string s) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar isPalindrome = function(s) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function isPalindrome(s: string): boolean {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function isPalindrome($s) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func isPalindrome(_ s: String) -> Bool {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun isPalindrome(s: String): Boolean {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  bool isPalindrome(String s) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func isPalindrome(s string) bool {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {String} s\n# @return {Boolean}\ndef is_palindrome(s)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def isPalindrome(s: String): Boolean = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn is_palindrome(s: String) -> bool {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (is-palindrome s)\n  (-> string? boolean?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec is_palindrome(S :: unicode:unicode_binary()) -> boolean().\nis_palindrome(S) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec is_palindrome(s :: String.t) :: boolean\n  def is_palindrome(s) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "word-ladder",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int ladderLength(String beginWord, String endWord, List<String> wordList) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int ladderLength(char* beginWord, char* endWord, char** wordList, int wordListSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int LadderLength(string beginWord, string endWord, IList<string> wordList) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {string} beginWord\n * @param {string} endWord\n * @param {string[]} wordList\n * @return {number}\n */\nvar ladderLength = function(beginWord, endWord, wordList) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function ladderLength(beginWord: string, endWord: string, wordList: string[]): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param String $beginWord\n     * @param String $endWord\n     * @param String[] $wordList\n     * @return Integer\n     */\n    function ladderLength($beginWord, $endWord, $wordList) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func ladderLength(_ beginWord: String, _ endWord: String, _ wordList: [String]) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun ladderLength(beginWord: String, endWord: String, wordList: List<String>): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int ladderLength(String beginWord, String endWord, List<String> wordList) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func ladderLength(beginWord string, endWord string, wordList []string) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {String} begin_word\n# @param {String} end_word\n# @param {String[]} word_list\n# @return {Integer}\ndef ladder_length(begin_word, end_word, word_list)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def ladderLength(beginWord: String, endWord: String, wordList: List[String]): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn ladder_length(begin_word: String, end_word: String, word_list: Vec<String>) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (ladder-length beginWord endWord wordList)\n  (-> string? string? (listof string?) exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec ladder_length(BeginWord :: unicode:unicode_binary(), EndWord :: unicode:unicode_binary(), WordList :: [unicode:unicode_binary()]) -> integer().\nladder_length(BeginWord, EndWord, WordList) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec ladder_length(begin_word :: String.t, end_word :: String.t, word_list :: [String.t]) :: integer\n  def ladder_length(begin_word, end_word, word_list) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "longest-consecutive-sequence",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int longestConsecutive(vector<int>& nums) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int longestConsecutive(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int longestConsecutive(int* nums, int numsSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int LongestConsecutive(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar longestConsecutive = function(nums) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function longestConsecutive(nums: number[]): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function longestConsecutive($nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func longestConsecutive(_ nums: [Int]) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun longestConsecutive(nums: IntArray): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int longestConsecutive(List<int> nums) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func longestConsecutive(nums []int) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef longest_consecutive(nums)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def longestConsecutive(nums: Array[Int]): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn longest_consecutive(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (longest-consecutive nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec longest_consecutive(Nums :: [integer()]) -> integer().\nlongest_consecutive(Nums) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec longest_consecutive(nums :: [integer]) :: integer\n  def longest_consecutive(nums) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "surrounded-regions",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    void solve(vector<vector<char>>& board) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public void solve(char[][] board) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "void solve(char** board, int boardSize, int* boardColSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public void Solve(char[][] board) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nvar solve = function(board) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "/**\n Do not return anything, modify board in-place instead.\n */\nfunction solve(board: string[][]): void {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @return NULL\n     */\n    function solve(&$board) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func solve(_ board: inout [[Character]]) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun solve(board: Array<CharArray>): Unit {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  void solve(List<List<String>> board) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func solve(board [][]byte)  {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Character[][]} board\n# @return {Void} Do not return anything, modify board in-place instead.\ndef solve(board)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def solve(board: Array[Array[Char]]): Unit = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn solve(board: &mut Vec<Vec<char>>) {\n        \n    }\n}"
                              }
                    ]
          },
          {
                    "title": "palindrome-partitioning",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    vector<vector<string>> partition(string s) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public List<List<String>> partition(String s) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar*** partition(char* s, int* returnSize, int** returnColumnSizes) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public IList<IList<string>> Partition(string s) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {string} s\n * @return {string[][]}\n */\nvar partition = function(s) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function partition(s: string): string[][] {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String[][]\n     */\n    function partition($s) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func partition(_ s: String) -> [[String]] {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun partition(s: String): List<List<String>> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  List<List<String>> partition(String s) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func partition(s string) [][]string {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {String} s\n# @return {String[][]}\ndef partition(s)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def partition(s: String): List[List[String]] = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn partition(s: String) -> Vec<Vec<String>> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (partition s)\n  (-> string? (listof (listof string?)))\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec partition(S :: unicode:unicode_binary()) -> [[unicode:unicode_binary()]].\npartition(S) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec partition(s :: String.t) :: [[String.t]]\n  def partition(s) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "gas-station",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int canCompleteCircuit(int[] gas, int[] cost) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int canCompleteCircuit(int* gas, int gasSize, int* cost, int costSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int CanCompleteCircuit(int[] gas, int[] cost) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} gas\n * @param {number[]} cost\n * @return {number}\n */\nvar canCompleteCircuit = function(gas, cost) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function canCompleteCircuit(gas: number[], cost: number[]): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $gas\n     * @param Integer[] $cost\n     * @return Integer\n     */\n    function canCompleteCircuit($gas, $cost) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func canCompleteCircuit(_ gas: [Int], _ cost: [Int]) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun canCompleteCircuit(gas: IntArray, cost: IntArray): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int canCompleteCircuit(List<int> gas, List<int> cost) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func canCompleteCircuit(gas []int, cost []int) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} gas\n# @param {Integer[]} cost\n# @return {Integer}\ndef can_complete_circuit(gas, cost)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def canCompleteCircuit(gas: Array[Int], cost: Array[Int]): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn can_complete_circuit(gas: Vec<i32>, cost: Vec<i32>) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (can-complete-circuit gas cost)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec can_complete_circuit(Gas :: [integer()], Cost :: [integer()]) -> integer().\ncan_complete_circuit(Gas, Cost) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec can_complete_circuit(gas :: [integer], cost :: [integer]) :: integer\n  def can_complete_circuit(gas, cost) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "single-number",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int singleNumber(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int singleNumber(int* nums, int numsSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int SingleNumber(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function(nums) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function singleNumber(nums: number[]): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function singleNumber($nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func singleNumber(_ nums: [Int]) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun singleNumber(nums: IntArray): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int singleNumber(List<int> nums) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func singleNumber(nums []int) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef single_number(nums)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def singleNumber(nums: Array[Int]): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn single_number(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (single-number nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec single_number(Nums :: [integer()]) -> integer().\nsingle_number(Nums) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec single_number(nums :: [integer]) :: integer\n  def single_number(nums) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "copy-list-with-random-pointer",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* next;\n    Node* random;\n    \n    Node(int _val) {\n        val = _val;\n        next = NULL;\n        random = NULL;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* copyRandomList(Node* head) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "/*\n// Definition for a Node.\nclass Node {\n    int val;\n    Node next;\n    Node random;\n\n    public Node(int val) {\n        this.val = val;\n        this.next = null;\n        this.random = null;\n    }\n}\n*/\n\nclass Solution {\n    public Node copyRandomList(Node head) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, x, next=None, random=None):\n        self.val = int(x)\n        self.next = next\n        self.random = random\n\"\"\"\n\nclass Solution(object):\n    def copyRandomList(self, head):\n        \"\"\"\n        :type head: Node\n        :rtype: Node\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n        self.val = int(x)\n        self.next = next\n        self.random = random\n\"\"\"\n\nclass Solution:\n    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Definition for a Node.\n * struct Node {\n *     int val;\n *     struct Node *next;\n *     struct Node *random;\n * };\n */\n\nstruct Node* copyRandomList(struct Node* head) {\n\t\n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public Node next;\n    public Node random;\n    \n    public Node(int _val) {\n        val = _val;\n        next = null;\n        random = null;\n    }\n}\n*/\n\npublic class Solution {\n    public Node CopyRandomList(Node head) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * // Definition for a _Node.\n * function _Node(val, next, random) {\n *    this.val = val;\n *    this.next = next;\n *    this.random = random;\n * };\n */\n\n/**\n * @param {_Node} head\n * @return {_Node}\n */\nvar copyRandomList = function(head) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "/**\n * Definition for _Node.\n * class _Node {\n *     val: number\n *     next: _Node | null\n *     random: _Node | null\n * \n *     constructor(val?: number, next?: _Node, random?: _Node) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *         this.random = (random===undefined ? null : random)\n *     }\n * }\n */\n\n\nfunction copyRandomList(head: _Node | null): _Node | null {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "/**\n * Definition for a Node.\n * class Node {\n *     public $val = null;\n *     public $next = null;\n *     public $random = null;\n *     function __construct($val = 0) {\n *         $this->val = $val;\n *         $this->next = null;\n *         $this->random = null;\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param Node $head\n     * @return Node\n     */\n    function copyRandomList($head) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "/**\n * Definition for a Node.\n * public class Node {\n *     public var val: Int\n *     public var next: Node?\n *     public var random: Node?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *    \t   self.random = nil\n *     }\n * }\n */\n\nclass Solution {\n    func copyRandomList(_ head: Node?) -> Node? {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "/**\n * Example:\n * var ti = Node(5)\n * var v = ti.`val`\n * Definition for a Node.\n * class Node(var `val`: Int) {\n *     var next: Node? = null\n *     var random: Node? = null\n * }\n */\n\nclass Solution {\n    fun copyRandomList(node: Node?): Node? {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Next *Node\n *     Random *Node\n * }\n */\n\nfunc copyRandomList(head *Node) *Node {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# Definition for Node.\n# class Node\n#     attr_accessor :val, :next, :random\n#     def initialize(val = 0)\n#         @val = val\n#\t\t  @next = nil\n#\t\t  @random = nil\n#     end\n# end\n\n# @param {Node} node\n# @return {Node}\ndef copyRandomList(head)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "/**\n * Definition for a Node.\n * class Node(var _value: Int) {\n *   var value: Int = _value\n *   var next: Node = null\n *   var random: Node = null\n * }\n */\n\nobject Solution {\n    def copyRandomList(head: Node): Node = {\n        \n    }\n}"
                              }
                    ]
          },
          {
                    "title": "word-break",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    bool wordBreak(string s, vector<string>& wordDict) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public boolean wordBreak(String s, List<String> wordDict) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "bool wordBreak(char* s, char** wordDict, int wordDictSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public bool WordBreak(string s, IList<string> wordDict) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {string} s\n * @param {string[]} wordDict\n * @return {boolean}\n */\nvar wordBreak = function(s, wordDict) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function wordBreak(s: string, wordDict: string[]): boolean {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String[] $wordDict\n     * @return Boolean\n     */\n    function wordBreak($s, $wordDict) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func wordBreak(_ s: String, _ wordDict: [String]) -> Bool {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun wordBreak(s: String, wordDict: List<String>): Boolean {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  bool wordBreak(String s, List<String> wordDict) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func wordBreak(s string, wordDict []string) bool {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {String} s\n# @param {String[]} word_dict\n# @return {Boolean}\ndef word_break(s, word_dict)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def wordBreak(s: String, wordDict: List[String]): Boolean = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn word_break(s: String, word_dict: Vec<String>) -> bool {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (word-break s wordDict)\n  (-> string? (listof string?) boolean?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec word_break(S :: unicode:unicode_binary(), WordDict :: [unicode:unicode_binary()]) -> boolean().\nword_break(S, WordDict) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec word_break(s :: String.t, word_dict :: [String.t]) :: boolean\n  def word_break(s, word_dict) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "word-break-ii",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    vector<string> wordBreak(string s, vector<string>& wordDict) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public List<String> wordBreak(String s, List<String> wordDict) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** wordBreak(char* s, char** wordDict, int wordDictSize, int* returnSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public IList<string> WordBreak(string s, IList<string> wordDict) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {string} s\n * @param {string[]} wordDict\n * @return {string[]}\n */\nvar wordBreak = function(s, wordDict) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function wordBreak(s: string, wordDict: string[]): string[] {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String[] $wordDict\n     * @return String[]\n     */\n    function wordBreak($s, $wordDict) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func wordBreak(_ s: String, _ wordDict: [String]) -> [String] {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun wordBreak(s: String, wordDict: List<String>): List<String> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  List<String> wordBreak(String s, List<String> wordDict) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func wordBreak(s string, wordDict []string) []string {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {String} s\n# @param {String[]} word_dict\n# @return {String[]}\ndef word_break(s, word_dict)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def wordBreak(s: String, wordDict: List[String]): List[String] = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn word_break(s: String, word_dict: Vec<String>) -> Vec<String> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (word-break s wordDict)\n  (-> string? (listof string?) (listof string?))\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec word_break(S :: unicode:unicode_binary(), WordDict :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\nword_break(S, WordDict) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec word_break(s :: String.t, word_dict :: [String.t]) :: [String.t]\n  def word_break(s, word_dict) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "linked-list-cycle",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public boolean hasCycle(ListNode head) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: Optional[ListNode]) -> bool:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nbool hasCycle(struct ListNode *head) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public bool HasCycle(ListNode head) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n\n/**\n * @param {ListNode} head\n * @return {boolean}\n */\nvar hasCycle = function(head) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction hasCycle(head: ListNode | null): boolean {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val) { $this->val = $val; }\n * }\n */\n\nclass Solution {\n    /**\n     * @param ListNode $head\n     * @return Boolean\n     */\n    function hasCycle($head) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\n\nclass Solution {\n    func hasCycle(_ head: ListNode?) -> Bool {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\n\nclass Solution {\n    fun hasCycle(head: ListNode?): Boolean {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc hasCycle(head *ListNode) bool {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val)\n#         @val = val\n#         @next = nil\n#     end\n# end\n\n# @param {ListNode} head\n# @return {Boolean}\ndef hasCycle(head)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\n\nobject Solution {\n    def hasCycle(head: ListNode): Boolean = {\n        \n    }\n}"
                              }
                    ]
          },
          {
                    "title": "lru-cache",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class LRUCache {\npublic:\n    LRUCache(int capacity) {\n        \n    }\n    \n    int get(int key) {\n        \n    }\n    \n    void put(int key, int value) {\n        \n    }\n};\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache* obj = new LRUCache(capacity);\n * int param_1 = obj->get(key);\n * obj->put(key,value);\n */"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class LRUCache {\n\n    public LRUCache(int capacity) {\n        \n    }\n    \n    public int get(int key) {\n        \n    }\n    \n    public void put(int key, int value) {\n        \n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class LRUCache(object):\n\n    def __init__(self, capacity):\n        \"\"\"\n        :type capacity: int\n        \"\"\"\n        \n\n    def get(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: int\n        \"\"\"\n        \n\n    def put(self, key, value):\n        \"\"\"\n        :type key: int\n        :type value: int\n        :rtype: None\n        \"\"\"\n        \n\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)"
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class LRUCache:\n\n    def __init__(self, capacity: int):\n        \n\n    def get(self, key: int) -> int:\n        \n\n    def put(self, key: int, value: int) -> None:\n        \n\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)"
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "\n\n\ntypedef struct {\n    \n} LRUCache;\n\n\nLRUCache* lRUCacheCreate(int capacity) {\n    \n}\n\nint lRUCacheGet(LRUCache* obj, int key) {\n    \n}\n\nvoid lRUCachePut(LRUCache* obj, int key, int value) {\n    \n}\n\nvoid lRUCacheFree(LRUCache* obj) {\n    \n}\n\n/**\n * Your LRUCache struct will be instantiated and called as such:\n * LRUCache* obj = lRUCacheCreate(capacity);\n * int param_1 = lRUCacheGet(obj, key);\n \n * lRUCachePut(obj, key, value);\n \n * lRUCacheFree(obj);\n*/"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class LRUCache {\n\n    public LRUCache(int capacity) {\n        \n    }\n    \n    public int Get(int key) {\n        \n    }\n    \n    public void Put(int key, int value) {\n        \n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.Get(key);\n * obj.Put(key,value);\n */"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number} capacity\n */\nvar LRUCache = function(capacity) {\n    \n};\n\n/** \n * @param {number} key\n * @return {number}\n */\nLRUCache.prototype.get = function(key) {\n    \n};\n\n/** \n * @param {number} key \n * @param {number} value\n * @return {void}\n */\nLRUCache.prototype.put = function(key, value) {\n    \n};\n\n/** \n * Your LRUCache object will be instantiated and called as such:\n * var obj = new LRUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "class LRUCache {\n    constructor(capacity: number) {\n        \n    }\n\n    get(key: number): number {\n        \n    }\n\n    put(key: number, value: number): void {\n        \n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * var obj = new LRUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class LRUCache {\n    /**\n     * @param Integer $capacity\n     */\n    function __construct($capacity) {\n        \n    }\n  \n    /**\n     * @param Integer $key\n     * @return Integer\n     */\n    function get($key) {\n        \n    }\n  \n    /**\n     * @param Integer $key\n     * @param Integer $value\n     * @return NULL\n     */\n    function put($key, $value) {\n        \n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * $obj = LRUCache($capacity);\n * $ret_1 = $obj->get($key);\n * $obj->put($key, $value);\n */"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "\nclass LRUCache {\n\n    init(_ capacity: Int) {\n        \n    }\n    \n    func get(_ key: Int) -> Int {\n        \n    }\n    \n    func put(_ key: Int, _ value: Int) {\n        \n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * let obj = LRUCache(capacity)\n * let ret_1: Int = obj.get(key)\n * obj.put(key, value)\n */"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class LRUCache(capacity: Int) {\n\n    fun get(key: Int): Int {\n        \n    }\n\n    fun put(key: Int, value: Int) {\n        \n    }\n\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * var obj = LRUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class LRUCache {\n\n  LRUCache(int capacity) {\n    \n  }\n  \n  int get(int key) {\n    \n  }\n  \n  void put(int key, int value) {\n    \n  }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = LRUCache(capacity);\n * int param1 = obj.get(key);\n * obj.put(key,value);\n */"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "type LRUCache struct {\n    \n}\n\n\nfunc Constructor(capacity int) LRUCache {\n    \n}\n\n\nfunc (this *LRUCache) Get(key int) int {\n    \n}\n\n\nfunc (this *LRUCache) Put(key int, value int)  {\n    \n}\n\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * obj := Constructor(capacity);\n * param_1 := obj.Get(key);\n * obj.Put(key,value);\n */"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "class LRUCache\n\n=begin\n    :type capacity: Integer\n=end\n    def initialize(capacity)\n        \n    end\n\n\n=begin\n    :type key: Integer\n    :rtype: Integer\n=end\n    def get(key)\n        \n    end\n\n\n=begin\n    :type key: Integer\n    :type value: Integer\n    :rtype: Void\n=end\n    def put(key, value)\n        \n    end\n\n\nend\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache.new(capacity)\n# param_1 = obj.get(key)\n# obj.put(key, value)"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "class LRUCache(_capacity: Int) {\n\n    def get(key: Int): Int = {\n        \n    }\n\n    def put(key: Int, value: Int): Unit = {\n        \n    }\n\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * val obj = new LRUCache(capacity)\n * val param_1 = obj.get(key)\n * obj.put(key,value)\n */"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "struct LRUCache {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl LRUCache {\n\n    fn new(capacity: i32) -> Self {\n        \n    }\n    \n    fn get(&self, key: i32) -> i32 {\n        \n    }\n    \n    fn put(&self, key: i32, value: i32) {\n        \n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * let obj = LRUCache::new(capacity);\n * let ret_1: i32 = obj.get(key);\n * obj.put(key, value);\n */"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define lru-cache%\n  (class object%\n    (super-new)\n    \n    ; capacity : exact-integer?\n    (init-field\n      capacity)\n    \n    ; get : exact-integer? -> exact-integer?\n    (define/public (get key)\n      )\n    ; put : exact-integer? exact-integer? -> void?\n    (define/public (put key value)\n      )))\n\n;; Your lru-cache% object will be instantiated and called as such:\n;; (define obj (new lru-cache% [capacity capacity]))\n;; (define param_1 (send obj get key))\n;; (send obj put key value)"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec lru_cache_init_(Capacity :: integer()) -> any().\nlru_cache_init_(Capacity) ->\n  .\n\n-spec lru_cache_get(Key :: integer()) -> integer().\nlru_cache_get(Key) ->\n  .\n\n-spec lru_cache_put(Key :: integer(), Value :: integer()) -> any().\nlru_cache_put(Key, Value) ->\n  .\n\n\n%% Your functions will be called as such:\n%% lru_cache_init_(Capacity),\n%% Param_1 = lru_cache_get(Key),\n%% lru_cache_put(Key, Value),\n\n%% lru_cache_init_ will be called before every test case, in which you can do some necessary initializations."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule LRUCache do\n  @spec init_(capacity :: integer) :: any\n  def init_(capacity) do\n    \n  end\n\n  @spec get(key :: integer) :: integer\n  def get(key) do\n    \n  end\n\n  @spec put(key :: integer, value :: integer) :: any\n  def put(key, value) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# LRUCache.init_(capacity)\n# param_1 = LRUCache.get(key)\n# LRUCache.put(key, value)\n\n# LRUCache.init_ will be called before every test case, in which you can do some necessary initializations."
                              }
                    ]
          },
          {
                    "title": "sort-list",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* sortList(ListNode* head) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode sortList(ListNode head) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* sortList(struct ListNode* head) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode SortList(ListNode head) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar sortList = function(head) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction sortList(head: ListNode | null): ListNode | null {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @return ListNode\n     */\n    function sortList($head) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func sortList(_ head: ListNode?) -> ListNode? {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun sortList(head: ListNode?): ListNode? {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? sortList(ListNode? head) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc sortList(head *ListNode) *ListNode {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @return {ListNode}\ndef sort_list(head)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def sortList(head: ListNode): ListNode = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn sort_list(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (sort-list head)\n  (-> (or/c list-node? #f) (or/c list-node? #f))\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec sort_list(Head :: #list_node{} | null) -> #list_node{} | null.\nsort_list(Head) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec sort_list(head :: ListNode.t | nil) :: ListNode.t | nil\n  def sort_list(head) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "max-points-on-a-line",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int maxPoints(vector<vector<int>>& points) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int maxPoints(int[][] points) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def maxPoints(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int maxPoints(int** points, int pointsSize, int* pointsColSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int MaxPoints(int[][] points) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar maxPoints = function(points) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function maxPoints(points: number[][]): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Integer\n     */\n    function maxPoints($points) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func maxPoints(_ points: [[Int]]) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun maxPoints(points: Array<IntArray>): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int maxPoints(List<List<int>> points) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func maxPoints(points [][]int) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[][]} points\n# @return {Integer}\ndef max_points(points)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def maxPoints(points: Array[Array[Int]]): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn max_points(points: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (max-points points)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec max_points(Points :: [[integer()]]) -> integer().\nmax_points(Points) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec max_points(points :: [[integer]]) :: integer\n  def max_points(points) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "evaluate-reverse-polish-notation",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int evalRPN(vector<string>& tokens) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int evalRPN(String[] tokens) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int evalRPN(char** tokens, int tokensSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int EvalRPN(string[] tokens) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {string[]} tokens\n * @return {number}\n */\nvar evalRPN = function(tokens) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function evalRPN(tokens: string[]): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param String[] $tokens\n     * @return Integer\n     */\n    function evalRPN($tokens) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func evalRPN(_ tokens: [String]) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun evalRPN(tokens: Array<String>): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int evalRPN(List<String> tokens) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func evalRPN(tokens []string) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {String[]} tokens\n# @return {Integer}\ndef eval_rpn(tokens)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def evalRPN(tokens: Array[String]): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn eval_rpn(tokens: Vec<String>) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (eval-rpn tokens)\n  (-> (listof string?) exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec eval_rpn(Tokens :: [unicode:unicode_binary()]) -> integer().\neval_rpn(Tokens) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec eval_rpn(tokens :: [String.t]) :: integer\n  def eval_rpn(tokens) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "maximum-product-subarray",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int maxProduct(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int maxProduct(int* nums, int numsSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int MaxProduct(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxProduct = function(nums) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function maxProduct(nums: number[]): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxProduct($nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func maxProduct(_ nums: [Int]) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun maxProduct(nums: IntArray): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int maxProduct(List<int> nums) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func maxProduct(nums []int) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_product(nums)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def maxProduct(nums: Array[Int]): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn max_product(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (max-product nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec max_product(Nums :: [integer()]) -> integer().\nmax_product(Nums) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec max_product(nums :: [integer]) :: integer\n  def max_product(nums) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "min-stack",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class MinStack {\npublic:\n    MinStack() {\n        \n    }\n    \n    void push(int val) {\n        \n    }\n    \n    void pop() {\n        \n    }\n    \n    int top() {\n        \n    }\n    \n    int getMin() {\n        \n    }\n};\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack* obj = new MinStack();\n * obj->push(val);\n * obj->pop();\n * int param_3 = obj->top();\n * int param_4 = obj->getMin();\n */"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class MinStack {\n\n    public MinStack() {\n        \n    }\n    \n    public void push(int val) {\n        \n    }\n    \n    public void pop() {\n        \n    }\n    \n    public int top() {\n        \n    }\n    \n    public int getMin() {\n        \n    }\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack obj = new MinStack();\n * obj.push(val);\n * obj.pop();\n * int param_3 = obj.top();\n * int param_4 = obj.getMin();\n */"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class MinStack(object):\n\n    def __init__(self):\n        \n\n    def push(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: None\n        \"\"\"\n        \n\n    def pop(self):\n        \"\"\"\n        :rtype: None\n        \"\"\"\n        \n\n    def top(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def getMin(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(val)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.getMin()"
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class MinStack:\n\n    def __init__(self):\n        \n\n    def push(self, val: int) -> None:\n        \n\n    def pop(self) -> None:\n        \n\n    def top(self) -> int:\n        \n\n    def getMin(self) -> int:\n        \n\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(val)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.getMin()"
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "\n\n\ntypedef struct {\n    \n} MinStack;\n\n\nMinStack* minStackCreate() {\n    \n}\n\nvoid minStackPush(MinStack* obj, int val) {\n    \n}\n\nvoid minStackPop(MinStack* obj) {\n    \n}\n\nint minStackTop(MinStack* obj) {\n    \n}\n\nint minStackGetMin(MinStack* obj) {\n    \n}\n\nvoid minStackFree(MinStack* obj) {\n    \n}\n\n/**\n * Your MinStack struct will be instantiated and called as such:\n * MinStack* obj = minStackCreate();\n * minStackPush(obj, val);\n \n * minStackPop(obj);\n \n * int param_3 = minStackTop(obj);\n \n * int param_4 = minStackGetMin(obj);\n \n * minStackFree(obj);\n*/"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class MinStack {\n\n    public MinStack() {\n        \n    }\n    \n    public void Push(int val) {\n        \n    }\n    \n    public void Pop() {\n        \n    }\n    \n    public int Top() {\n        \n    }\n    \n    public int GetMin() {\n        \n    }\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack obj = new MinStack();\n * obj.Push(val);\n * obj.Pop();\n * int param_3 = obj.Top();\n * int param_4 = obj.GetMin();\n */"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "\nvar MinStack = function() {\n    \n};\n\n/** \n * @param {number} val\n * @return {void}\n */\nMinStack.prototype.push = function(val) {\n    \n};\n\n/**\n * @return {void}\n */\nMinStack.prototype.pop = function() {\n    \n};\n\n/**\n * @return {number}\n */\nMinStack.prototype.top = function() {\n    \n};\n\n/**\n * @return {number}\n */\nMinStack.prototype.getMin = function() {\n    \n};\n\n/** \n * Your MinStack object will be instantiated and called as such:\n * var obj = new MinStack()\n * obj.push(val)\n * obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.getMin()\n */"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "class MinStack {\n    constructor() {\n        \n    }\n\n    push(val: number): void {\n        \n    }\n\n    pop(): void {\n        \n    }\n\n    top(): number {\n        \n    }\n\n    getMin(): number {\n        \n    }\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * var obj = new MinStack()\n * obj.push(val)\n * obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.getMin()\n */"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class MinStack {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $val\n     * @return NULL\n     */\n    function push($val) {\n        \n    }\n  \n    /**\n     * @return NULL\n     */\n    function pop() {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function top() {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function getMin() {\n        \n    }\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * $obj = MinStack();\n * $obj->push($val);\n * $obj->pop();\n * $ret_3 = $obj->top();\n * $ret_4 = $obj->getMin();\n */"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "\nclass MinStack {\n\n    init() {\n        \n    }\n    \n    func push(_ val: Int) {\n        \n    }\n    \n    func pop() {\n        \n    }\n    \n    func top() -> Int {\n        \n    }\n    \n    func getMin() -> Int {\n        \n    }\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * let obj = MinStack()\n * obj.push(val)\n * obj.pop()\n * let ret_3: Int = obj.top()\n * let ret_4: Int = obj.getMin()\n */"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class MinStack() {\n\n    fun push(`val`: Int) {\n        \n    }\n\n    fun pop() {\n        \n    }\n\n    fun top(): Int {\n        \n    }\n\n    fun getMin(): Int {\n        \n    }\n\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * var obj = MinStack()\n * obj.push(`val`)\n * obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.getMin()\n */"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class MinStack {\n\n  MinStack() {\n    \n  }\n  \n  void push(int val) {\n    \n  }\n  \n  void pop() {\n    \n  }\n  \n  int top() {\n    \n  }\n  \n  int getMin() {\n    \n  }\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack obj = MinStack();\n * obj.push(val);\n * obj.pop();\n * int param3 = obj.top();\n * int param4 = obj.getMin();\n */"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "type MinStack struct {\n    \n}\n\n\nfunc Constructor() MinStack {\n    \n}\n\n\nfunc (this *MinStack) Push(val int)  {\n    \n}\n\n\nfunc (this *MinStack) Pop()  {\n    \n}\n\n\nfunc (this *MinStack) Top() int {\n    \n}\n\n\nfunc (this *MinStack) GetMin() int {\n    \n}\n\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Push(val);\n * obj.Pop();\n * param_3 := obj.Top();\n * param_4 := obj.GetMin();\n */"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "class MinStack\n    def initialize()\n        \n    end\n\n\n=begin\n    :type val: Integer\n    :rtype: Void\n=end\n    def push(val)\n        \n    end\n\n\n=begin\n    :rtype: Void\n=end\n    def pop()\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def top()\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def get_min()\n        \n    end\n\n\nend\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack.new()\n# obj.push(val)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.get_min()"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "class MinStack() {\n\n    def push(`val`: Int): Unit = {\n        \n    }\n\n    def pop(): Unit = {\n        \n    }\n\n    def top(): Int = {\n        \n    }\n\n    def getMin(): Int = {\n        \n    }\n\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * val obj = new MinStack()\n * obj.push(`val`)\n * obj.pop()\n * val param_3 = obj.top()\n * val param_4 = obj.getMin()\n */"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "struct MinStack {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MinStack {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn push(&self, val: i32) {\n        \n    }\n    \n    fn pop(&self) {\n        \n    }\n    \n    fn top(&self) -> i32 {\n        \n    }\n    \n    fn get_min(&self) -> i32 {\n        \n    }\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * let obj = MinStack::new();\n * obj.push(val);\n * obj.pop();\n * let ret_3: i32 = obj.top();\n * let ret_4: i32 = obj.get_min();\n */"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define min-stack%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; push : exact-integer? -> void?\n    (define/public (push val)\n      )\n    ; pop : -> void?\n    (define/public (pop)\n      )\n    ; top : -> exact-integer?\n    (define/public (top)\n      )\n    ; get-min : -> exact-integer?\n    (define/public (get-min)\n      )))\n\n;; Your min-stack% object will be instantiated and called as such:\n;; (define obj (new min-stack%))\n;; (send obj push val)\n;; (send obj pop)\n;; (define param_3 (send obj top))\n;; (define param_4 (send obj get-min))"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec min_stack_init_() -> any().\nmin_stack_init_() ->\n  .\n\n-spec min_stack_push(Val :: integer()) -> any().\nmin_stack_push(Val) ->\n  .\n\n-spec min_stack_pop() -> any().\nmin_stack_pop() ->\n  .\n\n-spec min_stack_top() -> integer().\nmin_stack_top() ->\n  .\n\n-spec min_stack_get_min() -> integer().\nmin_stack_get_min() ->\n  .\n\n\n%% Your functions will be called as such:\n%% min_stack_init_(),\n%% min_stack_push(Val),\n%% min_stack_pop(),\n%% Param_3 = min_stack_top(),\n%% Param_4 = min_stack_get_min(),\n\n%% min_stack_init_ will be called before every test case, in which you can do some necessary initializations."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule MinStack do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec push(val :: integer) :: any\n  def push(val) do\n    \n  end\n\n  @spec pop() :: any\n  def pop() do\n    \n  end\n\n  @spec top() :: integer\n  def top() do\n    \n  end\n\n  @spec get_min() :: integer\n  def get_min() do\n    \n  end\nend\n\n# Your functions will be called as such:\n# MinStack.init_()\n# MinStack.push(val)\n# MinStack.pop()\n# param_3 = MinStack.top()\n# param_4 = MinStack.get_min()\n\n# MinStack.init_ will be called before every test case, in which you can do some necessary initializations."
                              }
                    ]
          },
          {
                    "title": "intersection-of-two-linked-lists",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def getIntersectionNode(self, headA, headB):\n        \"\"\"\n        :type head1, head1: ListNode\n        :rtype: ListNode\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public ListNode GetIntersectionNode(ListNode headA, ListNode headB) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n\n/**\n * @param {ListNode} headA\n * @param {ListNode} headB\n * @return {ListNode}\n */\nvar getIntersectionNode = function(headA, headB) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction getIntersectionNode(headA: ListNode | null, headB: ListNode | null): ListNode | null {\n\n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val) { $this->val = $val; }\n * }\n */\n\nclass Solution {\n    /**\n     * @param ListNode $headA\n     * @param ListNode $headB\n     * @return ListNode\n     */\n    function getIntersectionNode($headA, $headB) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\n\nclass Solution {\n    func getIntersectionNode(_ headA: ListNode?, _ headB: ListNode?) -> ListNode? {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\n\nclass Solution {\n    fun getIntersectionNode(headA:ListNode?, headB:ListNode?):ListNode? {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc getIntersectionNode(headA, headB *ListNode) *ListNode {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val)\n#         @val = val\n#         @next = nil\n#     end\n# end\n\n# @param {ListNode} headA\n# @param {ListNode} headB\n# @return {ListNode}\ndef getIntersectionNode(headA, headB)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\n\nobject Solution {\n    def getIntersectionNode(headA: ListNode, headB: ListNode): ListNode = {\n        \n    }\n}"
                              }
                    ]
          },
          {
                    "title": "find-peak-element",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int findPeakElement(vector<int>& nums) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int findPeakElement(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def findPeakElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def findPeakElement(self, nums: List[int]) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int findPeakElement(int* nums, int numsSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int FindPeakElement(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findPeakElement = function(nums) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function findPeakElement(nums: number[]): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findPeakElement($nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func findPeakElement(_ nums: [Int]) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun findPeakElement(nums: IntArray): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int findPeakElement(List<int> nums) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func findPeakElement(nums []int) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef find_peak_element(nums)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def findPeakElement(nums: Array[Int]): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn find_peak_element(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (find-peak-element nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec find_peak_element(Nums :: [integer()]) -> integer().\nfind_peak_element(Nums) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec find_peak_element(nums :: [integer]) :: integer\n  def find_peak_element(nums) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "fraction-to-recurring-decimal",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    string fractionToDecimal(int numerator, int denominator) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public String fractionToDecimal(int numerator, int denominator) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def fractionToDecimal(self, numerator: int, denominator: int) -> str:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "char* fractionToDecimal(int numerator, int denominator) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public string FractionToDecimal(int numerator, int denominator) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number} numerator\n * @param {number} denominator\n * @return {string}\n */\nvar fractionToDecimal = function(numerator, denominator) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function fractionToDecimal(numerator: number, denominator: number): string {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer $numerator\n     * @param Integer $denominator\n     * @return String\n     */\n    function fractionToDecimal($numerator, $denominator) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func fractionToDecimal(_ numerator: Int, _ denominator: Int) -> String {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun fractionToDecimal(numerator: Int, denominator: Int): String {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  String fractionToDecimal(int numerator, int denominator) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func fractionToDecimal(numerator int, denominator int) string {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer} numerator\n# @param {Integer} denominator\n# @return {String}\ndef fraction_to_decimal(numerator, denominator)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def fractionToDecimal(numerator: Int, denominator: Int): String = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn fraction_to_decimal(numerator: i32, denominator: i32) -> String {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (fraction-to-decimal numerator denominator)\n  (-> exact-integer? exact-integer? string?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec fraction_to_decimal(Numerator :: integer(), Denominator :: integer()) -> unicode:unicode_binary().\nfraction_to_decimal(Numerator, Denominator) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec fraction_to_decimal(numerator :: integer, denominator :: integer) :: String.t\n  def fraction_to_decimal(numerator, denominator) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "majority-element",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int majorityElement(vector<int>& nums) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int majorityElement(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int majorityElement(int* nums, int numsSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int MajorityElement(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar majorityElement = function(nums) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function majorityElement(nums: number[]): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function majorityElement($nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func majorityElement(_ nums: [Int]) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun majorityElement(nums: IntArray): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int majorityElement(List<int> nums) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func majorityElement(nums []int) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef majority_element(nums)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def majorityElement(nums: Array[Int]): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn majority_element(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (majority-element nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec majority_element(Nums :: [integer()]) -> integer().\nmajority_element(Nums) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec majority_element(nums :: [integer]) :: integer\n  def majority_element(nums) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "excel-sheet-column-number",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int titleToNumber(string columnTitle) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int titleToNumber(String columnTitle) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def titleToNumber(self, columnTitle: str) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int titleToNumber(char* columnTitle) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int TitleToNumber(string columnTitle) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {string} columnTitle\n * @return {number}\n */\nvar titleToNumber = function(columnTitle) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function titleToNumber(columnTitle: string): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param String $columnTitle\n     * @return Integer\n     */\n    function titleToNumber($columnTitle) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func titleToNumber(_ columnTitle: String) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun titleToNumber(columnTitle: String): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int titleToNumber(String columnTitle) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func titleToNumber(columnTitle string) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {String} column_title\n# @return {Integer}\ndef title_to_number(column_title)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def titleToNumber(columnTitle: String): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn title_to_number(column_title: String) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (title-to-number columnTitle)\n  (-> string? exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec title_to_number(ColumnTitle :: unicode:unicode_binary()) -> integer().\ntitle_to_number(ColumnTitle) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec title_to_number(column_title :: String.t) :: integer\n  def title_to_number(column_title) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "factorial-trailing-zeroes",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int trailingZeroes(int n) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int trailingZeroes(int n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def trailingZeroes(self, n: int) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int trailingZeroes(int n) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int TrailingZeroes(int n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar trailingZeroes = function(n) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function trailingZeroes(n: number): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function trailingZeroes($n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func trailingZeroes(_ n: Int) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun trailingZeroes(n: Int): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int trailingZeroes(int n) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func trailingZeroes(n int) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer} n\n# @return {Integer}\ndef trailing_zeroes(n)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def trailingZeroes(n: Int): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn trailing_zeroes(n: i32) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (trailing-zeroes n)\n  (-> exact-integer? exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec trailing_zeroes(N :: integer()) -> integer().\ntrailing_zeroes(N) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec trailing_zeroes(n :: integer) :: integer\n  def trailing_zeroes(n) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "largest-number",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    string largestNumber(vector<int>& nums) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public String largestNumber(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def largestNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def largestNumber(self, nums: List[int]) -> str:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "char* largestNumber(int* nums, int numsSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public string LargestNumber(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} nums\n * @return {string}\n */\nvar largestNumber = function(nums) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function largestNumber(nums: number[]): string {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return String\n     */\n    function largestNumber($nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func largestNumber(_ nums: [Int]) -> String {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun largestNumber(nums: IntArray): String {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  String largestNumber(List<int> nums) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func largestNumber(nums []int) string {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} nums\n# @return {String}\ndef largest_number(nums)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def largestNumber(nums: Array[Int]): String = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn largest_number(nums: Vec<i32>) -> String {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (largest-number nums)\n  (-> (listof exact-integer?) string?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec largest_number(Nums :: [integer()]) -> unicode:unicode_binary().\nlargest_number(Nums) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec largest_number(nums :: [integer]) :: String.t\n  def largest_number(nums) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "rotate-array",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    void rotate(vector<int>& nums, int k) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public void rotate(int[] nums, int k) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def rotate(self, nums: List[int], k: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "void rotate(int* nums, int numsSize, int k) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public void Rotate(int[] nums, int k) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar rotate = function(nums, k) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "/**\n Do not return anything, modify nums in-place instead.\n */\nfunction rotate(nums: number[], k: number): void {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return NULL\n     */\n    function rotate(&$nums, $k) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func rotate(_ nums: inout [Int], _ k: Int) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun rotate(nums: IntArray, k: Int): Unit {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  void rotate(List<int> nums, int k) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func rotate(nums []int, k int)  {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Void} Do not return anything, modify nums in-place instead.\ndef rotate(nums, k)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def rotate(nums: Array[Int], k: Int): Unit = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn rotate(nums: &mut Vec<i32>, k: i32) {\n        \n    }\n}"
                              }
                    ]
          },
          {
                    "title": "reverse-bits",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    uint32_t reverseBits(uint32_t n) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "public class Solution {\n    // you need treat n as an unsigned value\n    public int reverseBits(int n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution:\n    # @param n, an integer\n    # @return an integer\n    def reverseBits(self, n):\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def reverseBits(self, n: int) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "uint32_t reverseBits(uint32_t n) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public uint reverseBits(uint n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number} n - a positive integer\n * @return {number} - a positive integer\n */\nvar reverseBits = function(n) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function reverseBits(n: number): number {\n\t\n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function reverseBits($n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func reverseBits(_ n: Int) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    // you need treat n as an unsigned value\n    fun reverseBits(n:Int):Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func reverseBits(num uint32) uint32 {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer} n, a positive integer\n# @return {Integer}\ndef reverse_bits(n)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    // you need treat n as an unsigned value\n    def reverseBits(x: Int): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn reverse_bits(x: u32) -> u32 {\n        \n    }\n}"
                              }
                    ]
          },
          {
                    "title": "number-of-1-bits",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int hammingWeight(int n) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int hammingWeight(int n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def hammingWeight(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def hammingWeight(self, n: int) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int hammingWeight(int n) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int HammingWeight(int n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar hammingWeight = function(n) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function hammingWeight(n: number): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function hammingWeight($n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func hammingWeight(_ n: Int) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun hammingWeight(n: Int): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int hammingWeight(int n) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func hammingWeight(n int) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer} n\n# @return {Integer}\ndef hamming_weight(n)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def hammingWeight(n: Int): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn hamming_weight(n: i32) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (hamming-weight n)\n  (-> exact-integer? exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec hamming_weight(N :: integer()) -> integer().\nhamming_weight(N) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec hamming_weight(n :: integer) :: integer\n  def hamming_weight(n) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "house-robber",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int rob(vector<int>& nums) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int rob(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def rob(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int rob(int* nums, int numsSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int Rob(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar rob = function(nums) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function rob(nums: number[]): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function rob($nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func rob(_ nums: [Int]) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun rob(nums: IntArray): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int rob(List<int> nums) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func rob(nums []int) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef rob(nums)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def rob(nums: Array[Int]): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn rob(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (rob nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec rob(Nums :: [integer()]) -> integer().\nrob(Nums) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec rob(nums :: [integer]) :: integer\n  def rob(nums) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "number-of-islands",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int numIslands(vector<vector<char>>& grid) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int numIslands(char[][] grid) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def numIslands(self, grid):\n        \"\"\"\n        :type grid: List[List[str]]\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int numIslands(char** grid, int gridSize, int* gridColSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int NumIslands(char[][] grid) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {character[][]} grid\n * @return {number}\n */\nvar numIslands = function(grid) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function numIslands(grid: string[][]): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param String[][] $grid\n     * @return Integer\n     */\n    function numIslands($grid) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func numIslands(_ grid: [[Character]]) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun numIslands(grid: Array<CharArray>): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int numIslands(List<List<String>> grid) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func numIslands(grid [][]byte) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Character[][]} grid\n# @return {Integer}\ndef num_islands(grid)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def numIslands(grid: Array[Array[Char]]): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn num_islands(grid: Vec<Vec<char>>) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (num-islands grid)\n  (-> (listof (listof char?)) exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec num_islands(Grid :: [[char()]]) -> integer().\nnum_islands(Grid) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec num_islands(grid :: [[char]]) :: integer\n  def num_islands(grid) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "happy-number",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    bool isHappy(int n) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public boolean isHappy(int n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def isHappy(self, n: int) -> bool:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "bool isHappy(int n) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public bool IsHappy(int n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number} n\n * @return {boolean}\n */\nvar isHappy = function(n) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function isHappy(n: number): boolean {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Boolean\n     */\n    function isHappy($n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func isHappy(_ n: Int) -> Bool {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun isHappy(n: Int): Boolean {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  bool isHappy(int n) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func isHappy(n int) bool {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer} n\n# @return {Boolean}\ndef is_happy(n)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def isHappy(n: Int): Boolean = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn is_happy(n: i32) -> bool {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (is-happy n)\n  (-> exact-integer? boolean?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec is_happy(N :: integer()) -> boolean().\nis_happy(N) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec is_happy(n :: integer) :: boolean\n  def is_happy(n) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "count-primes",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int countPrimes(int n) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int countPrimes(int n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def countPrimes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def countPrimes(self, n: int) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int countPrimes(int n) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int CountPrimes(int n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar countPrimes = function(n) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function countPrimes(n: number): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function countPrimes($n) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func countPrimes(_ n: Int) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun countPrimes(n: Int): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int countPrimes(int n) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func countPrimes(n int) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer} n\n# @return {Integer}\ndef count_primes(n)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def countPrimes(n: Int): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn count_primes(n: i32) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (count-primes n)\n  (-> exact-integer? exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec count_primes(N :: integer()) -> integer().\ncount_primes(N) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec count_primes(n :: integer) :: integer\n  def count_primes(n) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "reverse-linked-list",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode reverseList(ListNode head) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* reverseList(struct ListNode* head) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode ReverseList(ListNode head) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction reverseList(head: ListNode | null): ListNode | null {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @return ListNode\n     */\n    function reverseList($head) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func reverseList(_ head: ListNode?) -> ListNode? {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun reverseList(head: ListNode?): ListNode? {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? reverseList(ListNode? head) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc reverseList(head *ListNode) *ListNode {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @return {ListNode}\ndef reverse_list(head)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def reverseList(head: ListNode): ListNode = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn reverse_list(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (reverse-list head)\n  (-> (or/c list-node? #f) (or/c list-node? #f))\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec reverse_list(Head :: #list_node{} | null) -> #list_node{} | null.\nreverse_list(Head) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec reverse_list(head :: ListNode.t | nil) :: ListNode.t | nil\n  def reverse_list(head) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "course-schedule",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public boolean canFinish(int numCourses, int[][] prerequisites) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def canFinish(self, numCourses, prerequisites):\n        \"\"\"\n        :type numCourses: int\n        :type prerequisites: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "bool canFinish(int numCourses, int** prerequisites, int prerequisitesSize, int* prerequisitesColSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public bool CanFinish(int numCourses, int[][] prerequisites) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number} numCourses\n * @param {number[][]} prerequisites\n * @return {boolean}\n */\nvar canFinish = function(numCourses, prerequisites) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function canFinish(numCourses: number, prerequisites: number[][]): boolean {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer $numCourses\n     * @param Integer[][] $prerequisites\n     * @return Boolean\n     */\n    function canFinish($numCourses, $prerequisites) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func canFinish(_ numCourses: Int, _ prerequisites: [[Int]]) -> Bool {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun canFinish(numCourses: Int, prerequisites: Array<IntArray>): Boolean {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  bool canFinish(int numCourses, List<List<int>> prerequisites) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func canFinish(numCourses int, prerequisites [][]int) bool {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer} num_courses\n# @param {Integer[][]} prerequisites\n# @return {Boolean}\ndef can_finish(num_courses, prerequisites)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def canFinish(numCourses: Int, prerequisites: Array[Array[Int]]): Boolean = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn can_finish(num_courses: i32, prerequisites: Vec<Vec<i32>>) -> bool {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (can-finish numCourses prerequisites)\n  (-> exact-integer? (listof (listof exact-integer?)) boolean?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec can_finish(NumCourses :: integer(), Prerequisites :: [[integer()]]) -> boolean().\ncan_finish(NumCourses, Prerequisites) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec can_finish(num_courses :: integer, prerequisites :: [[integer]]) :: boolean\n  def can_finish(num_courses, prerequisites) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "implement-trie-prefix-tree",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Trie {\npublic:\n    Trie() {\n        \n    }\n    \n    void insert(string word) {\n        \n    }\n    \n    bool search(string word) {\n        \n    }\n    \n    bool startsWith(string prefix) {\n        \n    }\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj->insert(word);\n * bool param_2 = obj->search(word);\n * bool param_3 = obj->startsWith(prefix);\n */"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Trie {\n\n    public Trie() {\n        \n    }\n    \n    public void insert(String word) {\n        \n    }\n    \n    public boolean search(String word) {\n        \n    }\n    \n    public boolean startsWith(String prefix) {\n        \n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie obj = new Trie();\n * obj.insert(word);\n * boolean param_2 = obj.search(word);\n * boolean param_3 = obj.startsWith(prefix);\n */"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Trie(object):\n\n    def __init__(self):\n        \n\n    def insert(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: None\n        \"\"\"\n        \n\n    def search(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n\n    def startsWith(self, prefix):\n        \"\"\"\n        :type prefix: str\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)"
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Trie:\n\n    def __init__(self):\n        \n\n    def insert(self, word: str) -> None:\n        \n\n    def search(self, word: str) -> bool:\n        \n\n    def startsWith(self, prefix: str) -> bool:\n        \n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)"
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "\n\n\ntypedef struct {\n    \n} Trie;\n\n\nTrie* trieCreate() {\n    \n}\n\nvoid trieInsert(Trie* obj, char* word) {\n    \n}\n\nbool trieSearch(Trie* obj, char* word) {\n    \n}\n\nbool trieStartsWith(Trie* obj, char* prefix) {\n    \n}\n\nvoid trieFree(Trie* obj) {\n    \n}\n\n/**\n * Your Trie struct will be instantiated and called as such:\n * Trie* obj = trieCreate();\n * trieInsert(obj, word);\n \n * bool param_2 = trieSearch(obj, word);\n \n * bool param_3 = trieStartsWith(obj, prefix);\n \n * trieFree(obj);\n*/"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Trie {\n\n    public Trie() {\n        \n    }\n    \n    public void Insert(string word) {\n        \n    }\n    \n    public bool Search(string word) {\n        \n    }\n    \n    public bool StartsWith(string prefix) {\n        \n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie obj = new Trie();\n * obj.Insert(word);\n * bool param_2 = obj.Search(word);\n * bool param_3 = obj.StartsWith(prefix);\n */"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "\nvar Trie = function() {\n    \n};\n\n/** \n * @param {string} word\n * @return {void}\n */\nTrie.prototype.insert = function(word) {\n    \n};\n\n/** \n * @param {string} word\n * @return {boolean}\n */\nTrie.prototype.search = function(word) {\n    \n};\n\n/** \n * @param {string} prefix\n * @return {boolean}\n */\nTrie.prototype.startsWith = function(prefix) {\n    \n};\n\n/** \n * Your Trie object will be instantiated and called as such:\n * var obj = new Trie()\n * obj.insert(word)\n * var param_2 = obj.search(word)\n * var param_3 = obj.startsWith(prefix)\n */"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "class Trie {\n    constructor() {\n        \n    }\n\n    insert(word: string): void {\n        \n    }\n\n    search(word: string): boolean {\n        \n    }\n\n    startsWith(prefix: string): boolean {\n        \n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * var obj = new Trie()\n * obj.insert(word)\n * var param_2 = obj.search(word)\n * var param_3 = obj.startsWith(prefix)\n */"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Trie {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param String $word\n     * @return NULL\n     */\n    function insert($word) {\n        \n    }\n  \n    /**\n     * @param String $word\n     * @return Boolean\n     */\n    function search($word) {\n        \n    }\n  \n    /**\n     * @param String $prefix\n     * @return Boolean\n     */\n    function startsWith($prefix) {\n        \n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * $obj = Trie();\n * $obj->insert($word);\n * $ret_2 = $obj->search($word);\n * $ret_3 = $obj->startsWith($prefix);\n */"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "\nclass Trie {\n\n    init() {\n        \n    }\n    \n    func insert(_ word: String) {\n        \n    }\n    \n    func search(_ word: String) -> Bool {\n        \n    }\n    \n    func startsWith(_ prefix: String) -> Bool {\n        \n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * let obj = Trie()\n * obj.insert(word)\n * let ret_2: Bool = obj.search(word)\n * let ret_3: Bool = obj.startsWith(prefix)\n */"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Trie() {\n\n    fun insert(word: String) {\n        \n    }\n\n    fun search(word: String): Boolean {\n        \n    }\n\n    fun startsWith(prefix: String): Boolean {\n        \n    }\n\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * var obj = Trie()\n * obj.insert(word)\n * var param_2 = obj.search(word)\n * var param_3 = obj.startsWith(prefix)\n */"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Trie {\n\n  Trie() {\n    \n  }\n  \n  void insert(String word) {\n    \n  }\n  \n  bool search(String word) {\n    \n  }\n  \n  bool startsWith(String prefix) {\n    \n  }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie obj = Trie();\n * obj.insert(word);\n * bool param2 = obj.search(word);\n * bool param3 = obj.startsWith(prefix);\n */"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "type Trie struct {\n    \n}\n\n\nfunc Constructor() Trie {\n    \n}\n\n\nfunc (this *Trie) Insert(word string)  {\n    \n}\n\n\nfunc (this *Trie) Search(word string) bool {\n    \n}\n\n\nfunc (this *Trie) StartsWith(prefix string) bool {\n    \n}\n\n\n/**\n * Your Trie object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Insert(word);\n * param_2 := obj.Search(word);\n * param_3 := obj.StartsWith(prefix);\n */"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "class Trie\n    def initialize()\n        \n    end\n\n\n=begin\n    :type word: String\n    :rtype: Void\n=end\n    def insert(word)\n        \n    end\n\n\n=begin\n    :type word: String\n    :rtype: Boolean\n=end\n    def search(word)\n        \n    end\n\n\n=begin\n    :type prefix: String\n    :rtype: Boolean\n=end\n    def starts_with(prefix)\n        \n    end\n\n\nend\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie.new()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.starts_with(prefix)"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "class Trie() {\n\n    def insert(word: String): Unit = {\n        \n    }\n\n    def search(word: String): Boolean = {\n        \n    }\n\n    def startsWith(prefix: String): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * val obj = new Trie()\n * obj.insert(word)\n * val param_2 = obj.search(word)\n * val param_3 = obj.startsWith(prefix)\n */"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "struct Trie {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Trie {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn insert(&self, word: String) {\n        \n    }\n    \n    fn search(&self, word: String) -> bool {\n        \n    }\n    \n    fn starts_with(&self, prefix: String) -> bool {\n        \n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * let obj = Trie::new();\n * obj.insert(word);\n * let ret_2: bool = obj.search(word);\n * let ret_3: bool = obj.starts_with(prefix);\n */"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define trie%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; insert : string? -> void?\n    (define/public (insert word)\n      )\n    ; search : string? -> boolean?\n    (define/public (search word)\n      )\n    ; starts-with : string? -> boolean?\n    (define/public (starts-with prefix)\n      )))\n\n;; Your trie% object will be instantiated and called as such:\n;; (define obj (new trie%))\n;; (send obj insert word)\n;; (define param_2 (send obj search word))\n;; (define param_3 (send obj starts-with prefix))"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec trie_init_() -> any().\ntrie_init_() ->\n  .\n\n-spec trie_insert(Word :: unicode:unicode_binary()) -> any().\ntrie_insert(Word) ->\n  .\n\n-spec trie_search(Word :: unicode:unicode_binary()) -> boolean().\ntrie_search(Word) ->\n  .\n\n-spec trie_starts_with(Prefix :: unicode:unicode_binary()) -> boolean().\ntrie_starts_with(Prefix) ->\n  .\n\n\n%% Your functions will be called as such:\n%% trie_init_(),\n%% trie_insert(Word),\n%% Param_2 = trie_search(Word),\n%% Param_3 = trie_starts_with(Prefix),\n\n%% trie_init_ will be called before every test case, in which you can do some necessary initializations."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Trie do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec insert(word :: String.t) :: any\n  def insert(word) do\n    \n  end\n\n  @spec search(word :: String.t) :: boolean\n  def search(word) do\n    \n  end\n\n  @spec starts_with(prefix :: String.t) :: boolean\n  def starts_with(prefix) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# Trie.init_()\n# Trie.insert(word)\n# param_2 = Trie.search(word)\n# param_3 = Trie.starts_with(prefix)\n\n# Trie.init_ will be called before every test case, in which you can do some necessary initializations."
                              }
                    ]
          },
          {
                    "title": "course-schedule-ii",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int[] findOrder(int numCourses, int[][] prerequisites) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def findOrder(self, numCourses, prerequisites):\n        \"\"\"\n        :type numCourses: int\n        :type prerequisites: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findOrder(int numCourses, int** prerequisites, int prerequisitesSize, int* prerequisitesColSize, int* returnSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int[] FindOrder(int numCourses, int[][] prerequisites) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number} numCourses\n * @param {number[][]} prerequisites\n * @return {number[]}\n */\nvar findOrder = function(numCourses, prerequisites) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function findOrder(numCourses: number, prerequisites: number[][]): number[] {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer $numCourses\n     * @param Integer[][] $prerequisites\n     * @return Integer[]\n     */\n    function findOrder($numCourses, $prerequisites) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func findOrder(_ numCourses: Int, _ prerequisites: [[Int]]) -> [Int] {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun findOrder(numCourses: Int, prerequisites: Array<IntArray>): IntArray {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  List<int> findOrder(int numCourses, List<List<int>> prerequisites) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func findOrder(numCourses int, prerequisites [][]int) []int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer} num_courses\n# @param {Integer[][]} prerequisites\n# @return {Integer[]}\ndef find_order(num_courses, prerequisites)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def findOrder(numCourses: Int, prerequisites: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn find_order(num_courses: i32, prerequisites: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (find-order numCourses prerequisites)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof exact-integer?))\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec find_order(NumCourses :: integer(), Prerequisites :: [[integer()]]) -> [integer()].\nfind_order(NumCourses, Prerequisites) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec find_order(num_courses :: integer, prerequisites :: [[integer]]) :: [integer]\n  def find_order(num_courses, prerequisites) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "word-search-ii",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public List<String> findWords(char[][] board, String[] words) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** findWords(char** board, int boardSize, int* boardColSize, char** words, int wordsSize, int* returnSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public IList<string> FindWords(char[][] board, string[] words) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {character[][]} board\n * @param {string[]} words\n * @return {string[]}\n */\nvar findWords = function(board, words) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function findWords(board: string[][], words: string[]): string[] {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @param String[] $words\n     * @return String[]\n     */\n    function findWords($board, $words) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func findWords(_ board: [[Character]], _ words: [String]) -> [String] {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun findWords(board: Array<CharArray>, words: Array<String>): List<String> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  List<String> findWords(List<List<String>> board, List<String> words) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func findWords(board [][]byte, words []string) []string {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Character[][]} board\n# @param {String[]} words\n# @return {String[]}\ndef find_words(board, words)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def findWords(board: Array[Array[Char]], words: Array[String]): List[String] = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn find_words(board: Vec<Vec<char>>, words: Vec<String>) -> Vec<String> {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (find-words board words)\n  (-> (listof (listof char?)) (listof string?) (listof string?))\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec find_words(Board :: [[char()]], Words :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\nfind_words(Board, Words) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec find_words(board :: [[char]], words :: [String.t]) :: [String.t]\n  def find_words(board, words) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "kth-largest-element-in-an-array",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    int findKthLargest(vector<int>& nums, int k) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public int findKthLargest(int[] nums, int k) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def findKthLargest(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def findKthLargest(self, nums: List[int], k: int) -> int:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "int findKthLargest(int* nums, int numsSize, int k) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public int FindKthLargest(int[] nums, int k) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findKthLargest = function(nums, k) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function findKthLargest(nums: number[], k: number): number {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function findKthLargest($nums, $k) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func findKthLargest(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun findKthLargest(nums: IntArray, k: Int): Int {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  int findKthLargest(List<int> nums, int k) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func findKthLargest(nums []int, k int) int {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef find_kth_largest(nums, k)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def findKthLargest(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn find_kth_largest(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (find-kth-largest nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec find_kth_largest(Nums :: [integer()], K :: integer()) -> integer().\nfind_kth_largest(Nums, K) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec find_kth_largest(nums :: [integer], k :: integer) :: integer\n  def find_kth_largest(nums, k) do\n    \n  end\nend"
                              }
                    ]
          },
          {
                    "title": "contains-duplicate",
                    "snippets": [
                              {
                                        "lang": "C++",
                                        "langSlug": "cpp",
                                        "code": "class Solution {\npublic:\n    bool containsDuplicate(vector<int>& nums) {\n        \n    }\n};"
                              },
                              {
                                        "lang": "Java",
                                        "langSlug": "java",
                                        "code": "class Solution {\n    public boolean containsDuplicate(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Python",
                                        "langSlug": "python",
                                        "code": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        "
                              },
                              {
                                        "lang": "Python3",
                                        "langSlug": "python3",
                                        "code": "class Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        "
                              },
                              {
                                        "lang": "C",
                                        "langSlug": "c",
                                        "code": "bool containsDuplicate(int* nums, int numsSize) {\n    \n}"
                              },
                              {
                                        "lang": "C#",
                                        "langSlug": "csharp",
                                        "code": "public class Solution {\n    public bool ContainsDuplicate(int[] nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "JavaScript",
                                        "langSlug": "javascript",
                                        "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar containsDuplicate = function(nums) {\n    \n};"
                              },
                              {
                                        "lang": "TypeScript",
                                        "langSlug": "typescript",
                                        "code": "function containsDuplicate(nums: number[]): boolean {\n    \n};"
                              },
                              {
                                        "lang": "PHP",
                                        "langSlug": "php",
                                        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function containsDuplicate($nums) {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Swift",
                                        "langSlug": "swift",
                                        "code": "class Solution {\n    func containsDuplicate(_ nums: [Int]) -> Bool {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Kotlin",
                                        "langSlug": "kotlin",
                                        "code": "class Solution {\n    fun containsDuplicate(nums: IntArray): Boolean {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Dart",
                                        "langSlug": "dart",
                                        "code": "class Solution {\n  bool containsDuplicate(List<int> nums) {\n    \n  }\n}"
                              },
                              {
                                        "lang": "Go",
                                        "langSlug": "golang",
                                        "code": "func containsDuplicate(nums []int) bool {\n    \n}"
                              },
                              {
                                        "lang": "Ruby",
                                        "langSlug": "ruby",
                                        "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef contains_duplicate(nums)\n    \nend"
                              },
                              {
                                        "lang": "Scala",
                                        "langSlug": "scala",
                                        "code": "object Solution {\n    def containsDuplicate(nums: Array[Int]): Boolean = {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Rust",
                                        "langSlug": "rust",
                                        "code": "impl Solution {\n    pub fn contains_duplicate(nums: Vec<i32>) -> bool {\n        \n    }\n}"
                              },
                              {
                                        "lang": "Racket",
                                        "langSlug": "racket",
                                        "code": "(define/contract (contains-duplicate nums)\n  (-> (listof exact-integer?) boolean?)\n  )"
                              },
                              {
                                        "lang": "Erlang",
                                        "langSlug": "erlang",
                                        "code": "-spec contains_duplicate(Nums :: [integer()]) -> boolean().\ncontains_duplicate(Nums) ->\n  ."
                              },
                              {
                                        "lang": "Elixir",
                                        "langSlug": "elixir",
                                        "code": "defmodule Solution do\n  @spec contains_duplicate(nums :: [integer]) :: boolean\n  def contains_duplicate(nums) do\n    \n  end\nend"
                              }
                    ]
          }
]